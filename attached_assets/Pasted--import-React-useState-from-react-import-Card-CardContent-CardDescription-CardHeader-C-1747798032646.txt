
import React, { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";
import { Checkbox } from "@/components/ui/checkbox";
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from "@/components/ui/select";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { 
  FileText, 
  Lock, 
  Shield, 
  AlertTriangle, 
  FileSearch,
  Clock,
  KeyRound,
  UserCheck
} from "lucide-react";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";

export const SecurityTab = () => {
  const [passwordPolicy, setPasswordPolicy] = useState({
    strongPassword: true,
    minLength: 8,
    specialChars: true,
    upperLower: true,
    numbers: true,
    expiration: false,
    expirationDays: 90,
    lockAccount: true,
    maxAttempts: 5,
    lockDuration: "60"
  });

  const [tfaPolicy, setTfaPolicy] = useState({
    required: "admin",
    methods: {
      app: true,
      sms: false
    }
  });

  const [sessionPolicy, setSessionPolicy] = useState({
    maxSessionTime: 480, // 8 hours
    inactivityTimeout: 30 // 30 minutes
  });

  const [privacySettings, setPrivacySettings] = useState({
    privacyPolicyType: "external",
    privacyPolicyUrl: "https://example.com/privacy",
    privacyPolicyContent: "",
    termsType: "external",
    termsUrl: "https://example.com/terms",
    termsContent: "",
    cookieBanner: true,
    cookieBannerText: "Este site utiliza cookies para melhorar sua experiência. Ao continuar navegando, você concorda com o uso de cookies.",
    acceptButtonText: "Aceitar",
    customizeButtonText: "Personalizar",
    marketingConsentText: "Eu concordo em receber comunicações de marketing por email e WhatsApp",
    dpoEmail: "dpo@empresa.com",
    dataRetentionConversations: "12",
    dataRetentionContacts: "24"
  });

  // Mock data for audit logs
  const auditLogs = [
    { 
      id: 1, 
      timestamp: "2025-05-19 15:30:42", 
      user: "admin@tenant.com", 
      ip: "192.168.1.1", 
      module: "Configurações", 
      action: "CONFIGURACAO_ALTERADA", 
      description: "Alterou política de senhas: comprimento mínimo de 6 para 8 caracteres",
      status: "Sucesso"
    },
    { 
      id: 2, 
      timestamp: "2025-05-19 14:22:15", 
      user: "gerente@tenant.com", 
      ip: "192.168.1.2", 
      module: "Usuários", 
      action: "USUARIO_CRIADO", 
      description: "Criou novo usuário 'agente.novo@tenant.com' com papel 'Agente'",
      status: "Sucesso"
    },
    { 
      id: 3, 
      timestamp: "2025-05-19 10:15:33", 
      user: "agente@tenant.com", 
      ip: "192.168.1.3", 
      module: "Contatos", 
      action: "CONTATO_EDITADO", 
      description: "Atualizou dados do contato 'João Silva' (ID: 12345)",
      status: "Sucesso"
    },
    { 
      id: 4, 
      timestamp: "2025-05-18 16:45:21", 
      user: "admin@tenant.com", 
      ip: "192.168.1.1", 
      module: "Canais", 
      action: "CANAL_WHATSAPP_CONFIGURADO", 
      description: "Configurou canal de WhatsApp 'Atendimento Principal'",
      status: "Sucesso"
    },
    { 
      id: 5, 
      timestamp: "2025-05-18 09:12:07", 
      user: "desconhecido", 
      ip: "203.0.113.45", 
      module: "Autenticação", 
      action: "LOGIN_FALHA", 
      description: "Tentativa de login falha para 'admin@tenant.com'",
      status: "Falha"
    }
  ];

  // Handle changes for password policy
  const handlePasswordPolicyChange = (field, value) => {
    setPasswordPolicy(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // Handle changes for 2FA policy
  const handleTfaPolicyChange = (field, value) => {
    if (field.startsWith('methods.')) {
      const methodName = field.split('.')[1];
      setTfaPolicy(prev => ({
        ...prev,
        methods: {
          ...prev.methods,
          [methodName]: value
        }
      }));
    } else {
      setTfaPolicy(prev => ({
        ...prev,
        [field]: value
      }));
    }
  };

  // Handle changes for session policy
  const handleSessionPolicyChange = (field, value) => {
    setSessionPolicy(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // Handle changes for privacy settings
  const handlePrivacySettingsChange = (field, value) => {
    setPrivacySettings(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSaveAccessPolicies = () => {
    console.log("Salvando políticas de acesso e autenticação", {
      passwordPolicy,
      tfaPolicy,
      sessionPolicy
    });
    // Aqui seria implementada a lógica para salvar as configurações
  };

  const handleSavePrivacySettings = () => {
    console.log("Salvando configurações de privacidade", privacySettings);
    // Aqui seria implementada a lógica para salvar as configurações
  };

  const handleExportAuditLogs = () => {
    console.log("Exportando logs de auditoria");
    // Aqui seria implementada a lógica para exportar os logs
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Segurança e Conformidade</CardTitle>
        <CardDescription>
          Configure políticas de segurança, privacidade e conformidade para sua organização
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="access" className="space-y-4">
          <TabsList className="grid grid-cols-3 gap-4 mb-4">
            <TabsTrigger value="access" className="flex items-center gap-2">
              <Lock className="h-4 w-4" /> Políticas de Acesso
            </TabsTrigger>
            <TabsTrigger value="privacy" className="flex items-center gap-2">
              <Shield className="h-4 w-4" /> Privacidade e Conformidade
            </TabsTrigger>
            <TabsTrigger value="audit" className="flex items-center gap-2">
              <FileSearch className="h-4 w-4" /> Logs de Auditoria
            </TabsTrigger>
          </TabsList>

          {/* Políticas de Acesso e Autenticação */}
          <TabsContent value="access" className="space-y-6">
            {/* Seção de Política de Senhas */}
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-medium">Política de Senhas</h3>
                  <p className="text-sm text-muted-foreground">
                    Configure os requisitos de senha para todos os usuários da sua organização
                  </p>
                </div>
              </div>

              <div className="space-y-4 border rounded-md p-4">
                <div className="flex items-center space-x-2">
                  <Checkbox 
                    id="strongPassword" 
                    checked={passwordPolicy.strongPassword}
                    onCheckedChange={(checked) => handlePasswordPolicyChange('strongPassword', checked)}
                  />
                  <Label htmlFor="strongPassword" className="font-medium">Exigir senhas fortes</Label>
                </div>

                <div className="ml-6 space-y-3">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="minLength" className="flex-1">Comprimento mínimo</Label>
                    <Input 
                      id="minLength" 
                      type="number" 
                      className="w-20" 
                      value={passwordPolicy.minLength}
                      onChange={(e) => handlePasswordPolicyChange('minLength', parseInt(e.target.value))}
                      disabled={!passwordPolicy.strongPassword}
                    />
                  </div>

                  <div className="flex items-center space-x-2">
                    <Checkbox 
                      id="specialChars" 
                      checked={passwordPolicy.specialChars}
                      onCheckedChange={(checked) => handlePasswordPolicyChange('specialChars', checked)}
                      disabled={!passwordPolicy.strongPassword}
                    />
                    <Label htmlFor="specialChars">Exigir caracteres especiais (@, #, $, etc.)</Label>
                  </div>

                  <div className="flex items-center space-x-2">
                    <Checkbox 
                      id="upperLower" 
                      checked={passwordPolicy.upperLower}
                      onCheckedChange={(checked) => handlePasswordPolicyChange('upperLower', checked)}
                      disabled={!passwordPolicy.strongPassword}
                    />
                    <Label htmlFor="upperLower">Exigir letras maiúsculas e minúsculas</Label>
                  </div>

                  <div className="flex items-center space-x-2">
                    <Checkbox 
                      id="numbers" 
                      checked={passwordPolicy.numbers}
                      onCheckedChange={(checked) => handlePasswordPolicyChange('numbers', checked)}
                      disabled={!passwordPolicy.strongPassword}
                    />
                    <Label htmlFor="numbers">Exigir números</Label>
                  </div>
                </div>

                <Separator className="my-4" />

                <div className="flex items-center space-x-2">
                  <Checkbox 
                    id="expiration" 
                    checked={passwordPolicy.expiration}
                    onCheckedChange={(checked) => handlePasswordPolicyChange('expiration', checked)}
                  />
                  <div className="flex flex-1 items-center justify-between">
                    <Label htmlFor="expiration" className="font-medium">Expiração de senha</Label>
                    <div className="flex items-center space-x-2">
                      <span className="text-sm text-muted-foreground">A cada</span>
                      <Input 
                        id="expirationDays" 
                        type="number" 
                        className="w-20" 
                        value={passwordPolicy.expirationDays}
                        onChange={(e) => handlePasswordPolicyChange('expirationDays', parseInt(e.target.value))}
                        disabled={!passwordPolicy.expiration}
                      />
                      <span className="text-sm text-muted-foreground">dias</span>
                    </div>
                  </div>
                </div>

                <Separator className="my-4" />

                <div className="flex items-center space-x-2">
                  <Checkbox 
                    id="lockAccount" 
                    checked={passwordPolicy.lockAccount}
                    onCheckedChange={(checked) => handlePasswordPolicyChange('lockAccount', checked)}
                  />
                  <div className="flex-1">
                    <div className="flex items-center justify-between">
                      <Label htmlFor="lockAccount" className="font-medium">Bloquear conta após tentativas falhas</Label>
                      <div className="flex items-center space-x-2">
                        <Input 
                          id="maxAttempts" 
                          type="number" 
                          className="w-16" 
                          value={passwordPolicy.maxAttempts}
                          onChange={(e) => handlePasswordPolicyChange('maxAttempts', parseInt(e.target.value))}
                          disabled={!passwordPolicy.lockAccount}
                        />
                        <span className="text-sm text-muted-foreground">tentativas</span>
                      </div>
                    </div>
                    
                    <div className="mt-2 flex items-center justify-between">
                      <Label htmlFor="lockDuration" className="text-sm text-muted-foreground">Duração do bloqueio</Label>
                      <Select 
                        value={passwordPolicy.lockDuration} 
                        onValueChange={(value) => handlePasswordPolicyChange('lockDuration', value)}
                        disabled={!passwordPolicy.lockAccount}
                      >
                        <SelectTrigger className="w-[180px]">
                          <SelectValue placeholder="Selecione a duração" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="15">15 minutos</SelectItem>
                          <SelectItem value="30">30 minutos</SelectItem>
                          <SelectItem value="60">1 hora</SelectItem>
                          <SelectItem value="manual">Até desbloqueio manual</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Seção de Autenticação de Dois Fatores */}
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-medium">Autenticação de Dois Fatores (2FA)</h3>
                  <p className="text-sm text-muted-foreground">
                    Configure as políticas de autenticação de dois fatores para sua organização
                  </p>
                </div>
              </div>

              <div className="space-y-4 border rounded-md p-4">
                <div className="space-y-3">
                  <Label className="font-medium">Exigir 2FA para:</Label>
                  
                  <RadioGroup 
                    value={tfaPolicy.required}
                    onValueChange={(value) => handleTfaPolicyChange('required', value)}
                    className="space-y-2"
                  >
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="none" id="none" />
                      <Label htmlFor="none">Nenhum usuário (2FA opcional)</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="all" id="all" />
                      <Label htmlFor="all">Todos os usuários</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="admin" id="admin" />
                      <Label htmlFor="admin">Apenas administradores</Label>
                    </div>
                  </RadioGroup>
                </div>

                <Separator className="my-4" />

                <div className="space-y-3">
                  <Label className="font-medium">Métodos de 2FA permitidos:</Label>
                  
                  <div className="space-y-2 ml-2">
                    <div className="flex items-center space-x-2">
                      <Checkbox 
                        id="app-authenticator" 
                        checked={tfaPolicy.methods.app}
                        onCheckedChange={(checked) => handleTfaPolicyChange('methods.app', checked)}
                      />
                      <Label htmlFor="app-authenticator">Aplicativo Autenticator (Google Authenticator, Authy)</Label>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <Checkbox 
                        id="sms" 
                        checked={tfaPolicy.methods.sms}
                        onCheckedChange={(checked) => handleTfaPolicyChange('methods.sms', checked)}
                      />
                      <div>
                        <Label htmlFor="sms">SMS</Label>
                        <p className="text-xs text-muted-foreground">Menos seguro, vulnerável a ataques de SIM Swap</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Seção de Configurações de Sessão */}
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-medium">Configurações de Sessão</h3>
                  <p className="text-sm text-muted-foreground">
                    Configure o tempo máximo de sessão e tempo de inatividade
                  </p>
                </div>
              </div>

              <div className="space-y-4 border rounded-md p-4">
                <div className="flex items-center justify-between">
                  <Label htmlFor="maxSessionTime" className="font-medium">Tempo máximo de sessão ativa</Label>
                  <div className="flex items-center space-x-2">
                    <Input 
                      id="maxSessionTime" 
                      type="number" 
                      className="w-20" 
                      value={sessionPolicy.maxSessionTime}
                      onChange={(e) => handleSessionPolicyChange('maxSessionTime', parseInt(e.target.value))}
                    />
                    <span className="text-sm text-muted-foreground">minutos</span>
                  </div>
                </div>
                <p className="text-xs text-muted-foreground">
                  Após este período, o usuário será desconectado mesmo que esteja ativo.
                </p>

                <Separator className="my-4" />

                <div className="flex items-center justify-between">
                  <Label htmlFor="inactivityTimeout" className="font-medium">Tempo de expiração por inatividade</Label>
                  <div className="flex items-center space-x-2">
                    <Input 
                      id="inactivityTimeout" 
                      type="number" 
                      className="w-20" 
                      value={sessionPolicy.inactivityTimeout}
                      onChange={(e) => handleSessionPolicyChange('inactivityTimeout', parseInt(e.target.value))}
                    />
                    <span className="text-sm text-muted-foreground">minutos</span>
                  </div>
                </div>
                <p className="text-xs text-muted-foreground">
                  A sessão será encerrada após este tempo de inatividade.
                </p>
              </div>
            </div>

            <div className="flex justify-end mt-6">
              <Button onClick={handleSaveAccessPolicies}>
                Salvar Políticas de Acesso
              </Button>
            </div>
          </TabsContent>

          {/* Privacidade e Conformidade */}
          <TabsContent value="privacy" className="space-y-6">
            <div className="bg-yellow-50 border border-yellow-200 rounded-md p-4 mb-6">
              <div className="flex">
                <AlertTriangle className="h-5 w-5 text-yellow-600 mr-2 flex-shrink-0" />
                <p className="text-sm text-yellow-700">
                  Estas ferramentas são fornecidas para auxiliar na sua conformidade com leis de proteção de dados como a LGPD. 
                  No entanto, a responsabilidade final pela conformidade legal e pela correta utilização destas ferramentas é 
                  integralmente do seu tenant. Esta plataforma não oferece aconselhamento jurídico.
                </p>
              </div>
            </div>

            {/* Gestão de Documentos Legais */}
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-medium">Documentos Legais</h3>
                  <p className="text-sm text-muted-foreground">
                    Gerencie sua política de privacidade, termos de uso e outros documentos legais
                  </p>
                </div>
              </div>

              <div className="space-y-6 border rounded-md p-4">
                {/* Política de Privacidade */}
                <div className="space-y-4">
                  <div className="flex items-center">
                    <FileText className="h-5 w-5 mr-2" />
                    <h4 className="font-medium">Política de Privacidade</h4>
                  </div>

                  <div className="space-y-3 ml-7">
                    <RadioGroup 
                      value={privacySettings.privacyPolicyType}
                      onValueChange={(value) => handlePrivacySettingsChange('privacyPolicyType', value)}
                      className="space-y-2"
                    >
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="external" id="external-privacy" />
                        <Label htmlFor="external-privacy">Usar link externo</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="hosted" id="hosted-privacy" />
                        <Label htmlFor="hosted-privacy">Hospedar conteúdo na plataforma</Label>
                      </div>
                    </RadioGroup>
                    
                    {privacySettings.privacyPolicyType === "external" && (
                      <div className="ml-6">
                        <Label htmlFor="privacy-url">URL da Política de Privacidade</Label>
                        <Input 
                          id="privacy-url" 
                          className="mt-1" 
                          value={privacySettings.privacyPolicyUrl}
                          onChange={(e) => handlePrivacySettingsChange('privacyPolicyUrl', e.target.value)}
                          placeholder="https://sua-empresa.com/politica-privacidade"
                        />
                      </div>
                    )}
                    
                    {privacySettings.privacyPolicyType === "hosted" && (
                      <div className="ml-6">
                        <Label htmlFor="privacy-content">Conteúdo da Política de Privacidade</Label>
                        <textarea 
                          id="privacy-content" 
                          className="w-full min-h-[150px] mt-1 p-2 border border-gray-300 rounded-md" 
                          value={privacySettings.privacyPolicyContent}
                          onChange={(e) => handlePrivacySettingsChange('privacyPolicyContent', e.target.value)}
                          placeholder="Cole o texto completo da sua política de privacidade aqui..."
                        />
                      </div>
                    )}
                  </div>
                </div>

                <Separator className="my-4" />

                {/* Termos de Uso */}
                <div className="space-y-4">
                  <div className="flex items-center">
                    <FileText className="h-5 w-5 mr-2" />
                    <h4 className="font-medium">Termos de Uso</h4>
                  </div>

                  <div className="space-y-3 ml-7">
                    <RadioGroup 
                      value={privacySettings.termsType}
                      onValueChange={(value) => handlePrivacySettingsChange('termsType', value)}
                      className="space-y-2"
                    >
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="external" id="external-terms" />
                        <Label htmlFor="external-terms">Usar link externo</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="hosted" id="hosted-terms" />
                        <Label htmlFor="hosted-terms">Hospedar conteúdo na plataforma</Label>
                      </div>
                    </RadioGroup>
                    
                    {privacySettings.termsType === "external" && (
                      <div className="ml-6">
                        <Label htmlFor="terms-url">URL dos Termos de Uso</Label>
                        <Input 
                          id="terms-url" 
                          className="mt-1" 
                          value={privacySettings.termsUrl}
                          onChange={(e) => handlePrivacySettingsChange('termsUrl', e.target.value)}
                          placeholder="https://sua-empresa.com/termos-uso"
                        />
                      </div>
                    )}
                    
                    {privacySettings.termsType === "hosted" && (
                      <div className="ml-6">
                        <Label htmlFor="terms-content">Conteúdo dos Termos de Uso</Label>
                        <textarea 
                          id="terms-content" 
                          className="w-full min-h-[150px] mt-1 p-2 border border-gray-300 rounded-md" 
                          value={privacySettings.termsContent}
                          onChange={(e) => handlePrivacySettingsChange('termsContent', e.target.value)}
                          placeholder="Cole o texto completo dos seus termos de uso aqui..."
                        />
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>

            {/* Configurações de Consentimento */}
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-medium">Consentimento de Dados (LGPD)</h3>
                  <p className="text-sm text-muted-foreground">
                    Configure as opções de consentimento para interfaces públicas e comunicações
                  </p>
                </div>
              </div>

              <div className="space-y-6 border rounded-md p-4">
                {/* Banner de Cookies */}
                <div className="space-y-4">
                  <div className="flex items-center space-x-2">
                    <Checkbox 
                      id="cookie-banner" 
                      checked={privacySettings.cookieBanner}
                      onCheckedChange={(checked) => handlePrivacySettingsChange('cookieBanner', checked)}
                    />
                    <Label htmlFor="cookie-banner" className="font-medium">Habilitar Banner de Cookies</Label>
                  </div>

                  {privacySettings.cookieBanner && (
                    <div className="ml-6 space-y-3">
                      <div>
                        <Label htmlFor="cookie-banner-text">Texto do Banner</Label>
                        <textarea 
                          id="cookie-banner-text" 
                          className="w-full min-h-[80px] mt-1 p-2 border border-gray-300 rounded-md" 
                          value={privacySettings.cookieBannerText}
                          onChange={(e) => handlePrivacySettingsChange('cookieBannerText', e.target.value)}
                        />
                      </div>

                      <div className="flex space-x-4">
                        <div className="flex-1">
                          <Label htmlFor="accept-button-text">Texto do Botão "Aceitar"</Label>
                          <Input 
                            id="accept-button-text" 
                            className="mt-1" 
                            value={privacySettings.acceptButtonText}
                            onChange={(e) => handlePrivacySettingsChange('acceptButtonText', e.target.value)}
                          />
                        </div>
                        <div className="flex-1">
                          <Label htmlFor="customize-button-text">Texto do Botão "Personalizar"</Label>
                          <Input 
                            id="customize-button-text" 
                            className="mt-1" 
                            value={privacySettings.customizeButtonText}
                            onChange={(e) => handlePrivacySettingsChange('customizeButtonText', e.target.value)}
                          />
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                <Separator className="my-4" />

                {/* Consentimento para Marketing */}
                <div className="space-y-4">
                  <Label className="font-medium">Consentimento para Comunicações de Marketing</Label>
                  <div className="space-y-3">
                    <div>
                      <Label htmlFor="marketing-consent-text">Texto Padrão para Checkbox de Opt-in</Label>
                      <Input 
                        id="marketing-consent-text" 
                        className="mt-1" 
                        value={privacySettings.marketingConsentText}
                        onChange={(e) => handlePrivacySettingsChange('marketingConsentText', e.target.value)}
                      />
                      <p className="text-xs text-muted-foreground mt-1">
                        Este texto será exibido junto ao checkbox de opt-in para marketing em formulários.
                      </p>
                    </div>
                  </div>
                </div>

                <Separator className="my-4" />

                {/* DPO e Direitos do Titular */}
                <div className="space-y-4">
                  <Label className="font-medium">Encarregado de Proteção de Dados (DPO)</Label>
                  <div>
                    <Label htmlFor="dpo-email">Email de Contato do DPO</Label>
                    <Input 
                      id="dpo-email" 
                      className="mt-1" 
                      value={privacySettings.dpoEmail}
                      onChange={(e) => handlePrivacySettingsChange('dpoEmail', e.target.value)}
                      placeholder="dpo@empresa.com"
                    />
                    <p className="text-xs text-muted-foreground mt-1">
                      Este email será exibido nas políticas de privacidade e para encaminhamento de solicitações de titulares.
                    </p>
                  </div>
                </div>
              </div>
            </div>

            {/* Retenção de Dados */}
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-medium">Retenção de Dados</h3>
                  <p className="text-sm text-muted-foreground">
                    Configure políticas de retenção e exclusão de dados
                  </p>
                </div>
              </div>

              <div className="space-y-4 border rounded-md p-4">
                <div className="bg-yellow-50 border border-yellow-200 rounded-md p-3 mb-4">
                  <div className="flex">
                    <AlertTriangle className="h-4 w-4 text-yellow-600 mr-2 flex-shrink-0" />
                    <p className="text-xs text-yellow-700">
                      Aviso: Estas são configurações avançadas com implicações significativas. Certifique-se de compreender 
                      completamente o impacto antes de alterar estas políticas.
                    </p>
                  </div>
                </div>

                <div className="flex items-center justify-between">
                  <Label htmlFor="data-retention-conversations" className="font-medium">Política de Retenção para Conversas</Label>
                  <div className="flex items-center space-x-2">
                    <Select 
                      value={privacySettings.dataRetentionConversations} 
                      onValueChange={(value) => handlePrivacySettingsChange('dataRetentionConversations', value)}
                    >
                      <SelectTrigger className="w-[180px]">
                        <SelectValue placeholder="Selecione o período" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="3">3 meses</SelectItem>
                        <SelectItem value="6">6 meses</SelectItem>
                        <SelectItem value="12">1 ano</SelectItem>
                        <SelectItem value="24">2 anos</SelectItem>
                        <SelectItem value="36">3 anos</SelectItem>
                        <SelectItem value="indefinite">Indefinidamente</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                <p className="text-xs text-muted-foreground">
                  Após o período selecionado de inatividade, as conversas serão marcadas para anonimização ou exclusão.
                </p>

                <Separator className="my-4" />

                <div className="flex items-center justify-between">
                  <Label htmlFor="data-retention-contacts" className="font-medium">Política de Retenção para Contatos</Label>
                  <div className="flex items-center space-x-2">
                    <Select 
                      value={privacySettings.dataRetentionContacts} 
                      onValueChange={(value) => handlePrivacySettingsChange('dataRetentionContacts', value)}
                    >
                      <SelectTrigger className="w-[180px]">
                        <SelectValue placeholder="Selecione o período" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="12">1 ano</SelectItem>
                        <SelectItem value="24">2 anos</SelectItem>
                        <SelectItem value="36">3 anos</SelectItem>
                        <SelectItem value="48">4 anos</SelectItem>
                        <SelectItem value="60">5 anos</SelectItem>
                        <SelectItem value="indefinite">Indefinidamente</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                <p className="text-xs text-muted-foreground">
                  Após o período selecionado sem interação, os contatos serão marcados para revisão e possível exclusão.
                </p>
              </div>
            </div>

            <div className="flex justify-end mt-6">
              <Button onClick={handleSavePrivacySettings}>
                Salvar Configurações de Privacidade
              </Button>
            </div>
          </TabsContent>

          {/* Logs de Auditoria */}
          <TabsContent value="audit">
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-medium">Logs de Auditoria</h3>
                  <p className="text-sm text-muted-foreground">
                    Consulte registros de ações importantes realizadas pelos usuários do sistema
                  </p>
                </div>
                <Button variant="outline" onClick={handleExportAuditLogs} className="flex items-center gap-2">
                  <FileText className="h-4 w-4" />
                  Exportar Logs (CSV)
                </Button>
              </div>

              {/* Filtros */}
              <div className="space-y-4 border rounded-md p-4 bg-muted/30">
                <h4 className="font-medium">Filtros</h4>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <Label htmlFor="date-range">Período</Label>
                    <Select defaultValue="today">
                      <SelectTrigger className="w-full mt-1">
                        <SelectValue placeholder="Selecione o período" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="today">Hoje</SelectItem>
                        <SelectItem value="yesterday">Ontem</SelectItem>
                        <SelectItem value="7days">Últimos 7 dias</SelectItem>
                        <SelectItem value="30days">Últimos 30 dias</SelectItem>
                        <SelectItem value="custom">Período personalizado</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="user">Usuário</Label>
                    <Select defaultValue="all">
                      <SelectTrigger className="w-full mt-1">
                        <SelectValue placeholder="Selecione o usuário" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">Todos os usuários</SelectItem>
                        <SelectItem value="admin@tenant.com">admin@tenant.com</SelectItem>
                        <SelectItem value="gerente@tenant.com">gerente@tenant.com</SelectItem>
                        <SelectItem value="agente@tenant.com">agente@tenant.com</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="action">Tipo de Ação</Label>
                    <Select defaultValue="all">
                      <SelectTrigger className="w-full mt-1">
                        <SelectValue placeholder="Selecione o tipo de ação" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">Todas as ações</SelectItem>
                        <SelectItem value="login">Login/Logout</SelectItem>
                        <SelectItem value="users">Gerenciamento de usuários</SelectItem>
                        <SelectItem value="contacts">Contatos</SelectItem>
                        <SelectItem value="settings">Configurações</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                <div className="flex justify-end">
                  <Button variant="secondary" size="sm" className="mt-2">
                    Aplicar Filtros
                  </Button>
                </div>
              </div>

              {/* Tabela de Logs */}
              <div className="border rounded-md">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead className="w-[180px]">Data e Hora</TableHead>
                      <TableHead>Usuário</TableHead>
                      <TableHead>IP</TableHead>
                      <TableHead>Módulo</TableHead>
                      <TableHead>Ação</TableHead>
                      <TableHead className="w-[300px]">Descrição</TableHead>
                      <TableHead>Status</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {auditLogs.map((log) => (
                      <TableRow key={log.id}>
                        <TableCell className="font-mono text-xs">{log.timestamp}</TableCell>
                        <TableCell>{log.user}</TableCell>
                        <TableCell>{log.ip}</TableCell>
                        <TableCell>{log.module}</TableCell>
                        <TableCell>
                          <code className="px-1 py-0.5 bg-muted rounded text-xs">{log.action}</code>
                        </TableCell>
                        <TableCell className="text-sm">{log.description}</TableCell>
                        <TableCell>
                          {log.status === "Sucesso" ? (
                            <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800">
                              Sucesso
                            </span>
                          ) : (
                            <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-100 text-red-800">
                              Falha
                            </span>
                          )}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>

              {/* Paginação (simples) */}
              <div className="flex items-center justify-between">
                <div className="text-sm text-muted-foreground">
                  Mostrando 1-5 de 42 registros
                </div>
                <div className="flex space-x-2">
                  <Button variant="outline" size="sm" disabled>
                    Anterior
                  </Button>
                  <Button variant="outline" size="sm">
                    Próxima
                  </Button>
                </div>
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
};

