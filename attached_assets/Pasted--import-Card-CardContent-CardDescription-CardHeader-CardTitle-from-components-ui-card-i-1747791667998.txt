
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Award, BadgeCheck, Calendar, TrendingUp, Trophy } from "lucide-react";
import { DateRangePicker } from "@/components/ui/date-range-picker";
import { useEffect, useState } from "react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { DateRange } from "react-day-picker";
import { subDays } from "date-fns";

// Dados para a equipe de vendas
const salesTeamData = [
  {
    id: 1,
    name: "Ana Silva",
    avatar: "",
    role: "Vendedora Sênior",
    sales: 156000,
    deals: 28,
    target: 180000,
    completion: 87,
    awards: ["Top Seller Q1", "Maior Ticket Médio"],
    previousPosition: 2,
    trend: "up",
  },
  {
    id: 2,
    name: "Carlos Oliveira",
    avatar: "",
    role: "Vendedor Pleno",
    sales: 142000,
    deals: 32,
    target: 150000,
    completion: 95,
    awards: ["Mais Negócios Fechados"],
    previousPosition: 3,
    trend: "up",
  },
  {
    id: 3,
    name: "Juliana Costa",
    avatar: "",
    role: "Vendedora Sênior",
    sales: 178000,
    deals: 24,
    target: 180000,
    completion: 99,
    awards: ["Melhor Taxa de Conversão"],
    previousPosition: 1,
    trend: "down",
  },
  {
    id: 4,
    name: "Ricardo Almeida",
    avatar: "",
    role: "Vendedor Pleno",
    sales: 129000,
    deals: 26,
    target: 150000,
    completion: 86,
    awards: [],
    previousPosition: 4,
    trend: "same",
  },
  {
    id: 5,
    name: "Fernanda Lima",
    avatar: "",
    role: "Vendedora Júnior",
    sales: 98000,
    deals: 18,
    target: 100000,
    completion: 98,
    awards: ["Revelação do Trimestre"],
    previousPosition: 5,
    trend: "same",
  }
];

// Dados para a equipe de suporte
const supportTeamData = [
  {
    id: 1,
    name: "Marcos Santos",
    avatar: "",
    role: "Atendente Sênior",
    tickets: 245,
    resolution: 92,
    satisfaction: 97,
    target: 240,
    completion: 102,
    awards: ["Melhor Satisfação do Cliente"],
    previousPosition: 1,
    trend: "same",
  },
  {
    id: 2,
    name: "Patricia Ferreira",
    avatar: "",
    role: "Atendente Plena",
    tickets: 228,
    resolution: 89,
    satisfaction: 95,
    target: 220,
    completion: 104,
    awards: ["Resolução Mais Rápida"],
    previousPosition: 3,
    trend: "up",
  },
  {
    id: 3,
    name: "Roberto Gomes",
    avatar: "",
    role: "Atendente Sênior",
    tickets: 210,
    resolution: 94,
    satisfaction: 96,
    target: 240,
    completion: 88,
    awards: ["Maior Taxa de Resolução no 1° Contato"],
    previousPosition: 2,
    trend: "down",
  },
  {
    id: 4,
    name: "Camila Duarte",
    avatar: "",
    role: "Atendente Plena",
    tickets: 215,
    resolution: 91,
    satisfaction: 94,
    target: 220,
    completion: 98,
    awards: [],
    previousPosition: 4,
    trend: "same",
  },
  {
    id: 5,
    name: "Lucas Martins",
    avatar: "",
    role: "Atendente Júnior",
    tickets: 180,
    resolution: 87,
    satisfaction: 92,
    target: 180,
    completion: 100,
    awards: ["Revelação do Mês"],
    previousPosition: 6,
    trend: "up",
  }
];

export const PerformanceRanking = () => {
  // Estado para os filtros
  const [activeTeam, setActiveTeam] = useState('sales');
  const [metric, setMetric] = useState('default');
  const [period, setPeriod] = useState('month');
  const [dateRange, setDateRange] = useState<DateRange | undefined>({
    from: subDays(new Date(), 30),
    to: new Date()
  });
  
  // Estado para os dados filtrados
  const [salesData, setSalesData] = useState(salesTeamData);
  const [supportData, setSupportData] = useState(supportTeamData);
  
  // Aplicar filtros na mudança de métricas
  useEffect(() => {
    // Aplicar filtros aos dados de vendas
    let filteredSalesData = [...salesTeamData];
    
    if (metric === 'amount') {
      filteredSalesData.sort((a, b) => b.sales - a.sales);
    } else if (metric === 'deals') {
      filteredSalesData.sort((a, b) => b.deals - a.deals);
    } else if (metric === 'completion') {
      filteredSalesData.sort((a, b) => b.completion - a.completion);
    } else {
      // default - por vendas
      filteredSalesData.sort((a, b) => b.sales - a.sales);
    }
    
    setSalesData(filteredSalesData);
    
    // Aplicar filtros aos dados de suporte
    let filteredSupportData = [...supportTeamData];
    
    if (metric === 'tickets') {
      filteredSupportData.sort((a, b) => b.tickets - a.tickets);
    } else if (metric === 'resolution') {
      filteredSupportData.sort((a, b) => b.resolution - a.resolution);
    } else if (metric === 'completion') {
      filteredSupportData.sort((a, b) => b.completion - a.completion);
    } else {
      // default - por satisfação
      filteredSupportData.sort((a, b) => b.satisfaction - a.satisfaction);
    }
    
    setSupportData(filteredSupportData);
  }, [metric]);
  
  // Renderizar indicador de tendência
  const renderTrendIndicator = (trend: string) => {
    if (trend === 'up') {
      return <span className="text-emerald-500 flex items-center text-xs">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-1">
          <polyline points="18 15 12 9 6 15"></polyline>
        </svg>
        Subiu
      </span>;
    }
    if (trend === 'down') {
      return <span className="text-red-500 flex items-center text-xs">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-1">
          <polyline points="6 9 12 15 18 9"></polyline>
        </svg>
        Caiu
      </span>;
    }
    return <span className="text-gray-500 flex items-center text-xs">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-1">
        <line x1="5" y1="12" x2="19" y2="12"></line>
      </svg>
      Manteve
    </span>;
  };

  return (
    <div className="space-y-6">
      {/* Filtros do ranking */}
      <Card className="mb-6">
        <CardContent className="pt-6">
          <div className="flex flex-wrap gap-4">
            <div className="flex-1 min-w-[180px]">
              <label className="text-sm font-medium mb-1 block">Período</label>
              <div className="flex gap-2">
                <Select value={period} onValueChange={setPeriod}>
                  <SelectTrigger className="w-full">
                    <SelectValue placeholder="Selecione o período" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="today">Hoje</SelectItem>
                    <SelectItem value="week">Esta semana</SelectItem>
                    <SelectItem value="month">Este mês</SelectItem>
                    <SelectItem value="quarter">Este trimestre</SelectItem>
                    <SelectItem value="custom">Personalizado</SelectItem>
                  </SelectContent>
                </Select>
                {period === 'custom' && (
                  <div className="flex-1">
                    <DateRangePicker
                      selected={dateRange}
                      onSelect={setDateRange}
                    />
                  </div>
                )}
              </div>
            </div>
            
            <div className="flex-1 min-w-[180px]">
              <label className="text-sm font-medium mb-1 block">Métrica</label>
              <Select value={metric} onValueChange={setMetric}>
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="Selecione a métrica" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="default">{activeTeam === 'sales' ? 'Vendas (R$)' : 'Satisfação (%)'}</SelectItem>
                  <SelectItem value={activeTeam === 'sales' ? 'deals' : 'tickets'}>
                    {activeTeam === 'sales' ? 'Negócios Fechados' : 'Tickets Atendidos'}
                  </SelectItem>
                  <SelectItem value={activeTeam === 'sales' ? 'amount' : 'resolution'}>
                    {activeTeam === 'sales' ? 'Valor Total (R$)' : 'Taxa de Resolução (%)'}
                  </SelectItem>
                  <SelectItem value="completion">Progresso da Meta (%)</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Pódio dos três primeiros */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        {/* Segundo lugar */}
        <div className={`flex flex-col items-center animate-fade-in ${activeTeam === 'sales' ? (salesData.length > 1 ? '' : 'invisible') : (supportData.length > 1 ? '' : 'invisible')}`}>
          <div className="relative">
            <div className="w-24 h-24 rounded-full bg-gray-100 border-4 border-silver flex items-center justify-center shadow-lg mb-2">
              <Avatar className="w-20 h-20">
                <AvatarImage src={(activeTeam === 'sales' && salesData.length > 1) ? salesData[1].avatar : 
                                 (activeTeam === 'support' && supportData.length > 1) ? supportData[1].avatar : ""} />
                <AvatarFallback className="text-xl font-bold">
                  {activeTeam === 'sales' && salesData.length > 1 
                    ? salesData[1].name.split(' ').map(n => n[0]).join('')
                    : activeTeam === 'support' && supportData.length > 1
                      ? supportData[1].name.split(' ').map(n => n[0]).join('')
                      : ""}
                </AvatarFallback>
              </Avatar>
            </div>
            <div className="absolute top-0 right-0 bg-silver text-white w-8 h-8 rounded-full flex items-center justify-center text-lg font-bold border-2 border-white shadow-md">2</div>
          </div>
          <h3 className="font-medium text-center mt-1">{activeTeam === 'sales' && salesData.length > 1 ? salesData[1].name : 
                                                       activeTeam === 'support' && supportData.length > 1 ? supportData[1].name : ""}</h3>
          <p className="text-sm text-muted-foreground text-center">
            {activeTeam === 'sales' && salesData.length > 1 
              ? (metric === 'deals' ? `${salesData[1].deals} negócios` : `R$ ${salesData[1].sales.toLocaleString()}`)
              : activeTeam === 'support' && supportData.length > 1
                ? (metric === 'tickets' ? `${supportData[1].tickets} tickets` : `${supportData[1].satisfaction}% satisfação`)
                : ""}
          </p>
          <div className="mt-1">
            {renderTrendIndicator(activeTeam === 'sales' && salesData.length > 1 ? salesData[1].trend : 
                                  activeTeam === 'support' && supportData.length > 1 ? supportData[1].trend : "same")}
          </div>
        </div>
        
        {/* Primeiro lugar */}
        <div className="flex flex-col items-center animate-scale-in">
          <div className="relative">
            <div className="w-32 h-32 rounded-full bg-gray-100 border-4 border-yellow-500 flex items-center justify-center shadow-lg mb-2">
              <Avatar className="w-28 h-28">
                <AvatarImage src={activeTeam === 'sales' ? salesData[0].avatar : supportData[0].avatar} />
                <AvatarFallback className="text-2xl font-bold">
                  {activeTeam === 'sales' 
                    ? salesData[0].name.split(' ').map(n => n[0]).join('')
                    : supportData[0].name.split(' ').map(n => n[0]).join('')}
                </AvatarFallback>
              </Avatar>
            </div>
            <div className="absolute top-0 right-0 bg-yellow-500 text-white w-10 h-10 rounded-full flex items-center justify-center text-xl font-bold border-2 border-white shadow-md">1</div>
            <Trophy className="absolute bottom-0 right-0 text-yellow-500 h-8 w-8" />
          </div>
          <h3 className="font-bold text-lg text-center mt-1">{activeTeam === 'sales' ? salesData[0].name : supportData[0].name}</h3>
          <p className="text-sm font-medium text-center">
            {activeTeam === 'sales' 
              ? (metric === 'deals' ? `${salesData[0].deals} negócios` : `R$ ${salesData[0].sales.toLocaleString()}`)
              : (metric === 'tickets' ? `${supportData[0].tickets} tickets` : `${supportData[0].satisfaction}% satisfação`)}
          </p>
          <div className="mt-1">
            {renderTrendIndicator(activeTeam === 'sales' ? salesData[0].trend : supportData[0].trend)}
          </div>
        </div>
        
        {/* Terceiro lugar */}
        <div className={`flex flex-col items-center animate-fade-in ${activeTeam === 'sales' ? (salesData.length > 2 ? '' : 'invisible') : (supportData.length > 2 ? '' : 'invisible')}`}>
          <div className="relative">
            <div className="w-24 h-24 rounded-full bg-gray-100 border-4 border-amber-700 flex items-center justify-center shadow-lg mb-2">
              <Avatar className="w-20 h-20">
                <AvatarImage src={(activeTeam === 'sales' && salesData.length > 2) ? salesData[2].avatar : 
                                 (activeTeam === 'support' && supportData.length > 2) ? supportData[2].avatar : ""} />
                <AvatarFallback className="text-xl font-bold">
                  {activeTeam === 'sales' && salesData.length > 2 
                    ? salesData[2].name.split(' ').map(n => n[0]).join('')
                    : activeTeam === 'support' && supportData.length > 2
                      ? supportData[2].name.split(' ').map(n => n[0]).join('')
                      : ""}
                </AvatarFallback>
              </Avatar>
            </div>
            <div className="absolute top-0 right-0 bg-amber-700 text-white w-8 h-8 rounded-full flex items-center justify-center text-lg font-bold border-2 border-white shadow-md">3</div>
          </div>
          <h3 className="font-medium text-center mt-1">{activeTeam === 'sales' && salesData.length > 2 ? salesData[2].name : 
                                                       activeTeam === 'support' && supportData.length > 2 ? supportData[2].name : ""}</h3>
          <p className="text-sm text-muted-foreground text-center">
            {activeTeam === 'sales' && salesData.length > 2 
              ? (metric === 'deals' ? `${salesData[2].deals} negócios` : `R$ ${salesData[2].sales.toLocaleString()}`)
              : activeTeam === 'support' && supportData.length > 2
                ? (metric === 'tickets' ? `${supportData[2].tickets} tickets` : `${supportData[2].satisfaction}% satisfação`)
                : ""}
          </p>
          <div className="mt-1">
            {renderTrendIndicator(activeTeam === 'sales' && salesData.length > 2 ? salesData[2].trend : 
                                  activeTeam === 'support' && supportData.length > 2 ? supportData[2].trend : "same")}
          </div>
        </div>
      </div>

      <Tabs defaultValue="sales" className="w-full" value={activeTeam} onValueChange={setActiveTeam}>
        <TabsList className="mb-4">
          <TabsTrigger value="sales">Equipe de Vendas</TabsTrigger>
          <TabsTrigger value="support">Equipe de Atendimento</TabsTrigger>
        </TabsList>
        
        <TabsContent value="sales" className="animate-fade-in">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle className="flex items-center">
                    <Trophy className="mr-2 h-5 w-5 text-yellow-500" />
                    Ranking de Vendedores
                  </CardTitle>
                  <CardDescription>
                    Desempenho dos vendedores em relação às metas do período atual
                  </CardDescription>
                </div>
                <div className="rounded-md bg-primary/10 px-3 py-1 text-sm font-medium text-primary">
                  Q2 2025
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-8">
                {salesData.map((member, index) => (
                  <div key={member.id} className="flex items-center">
                    <div className="mr-4 flex h-8 w-8 shrink-0 items-center justify-center rounded-full bg-primary/10 text-primary">
                      {index + 1}
                    </div>
                    <Avatar className="h-10 w-10 border-2 border-background">
                      <AvatarImage src={member.avatar} alt={member.name} />
                      <AvatarFallback>{member.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>
                    </Avatar>
                    <div className="ml-4 space-y-1 flex-1">
                      <div className="flex justify-between">
                        <p className="text-sm font-medium leading-none flex items-center">
                          {member.name}
                          {member.awards.length > 0 && (
                            <BadgeCheck className="ml-1 h-4 w-4 text-primary" />
                          )}
                          {member.trend !== 'same' && (
                            <span className={`ml-2 text-xs ${member.trend === 'up' ? 'text-emerald-500' : 'text-red-500'}`}>
                              {member.trend === 'up' ? '↑' : '↓'}
                            </span>
                          )}
                        </p>
                        <div className="text-sm text-muted-foreground">
                          R$ {member.sales.toLocaleString()}
                        </div>
                      </div>
                      <div className="flex justify-between items-center">
                        <div className="text-xs text-muted-foreground">{member.role}</div>
                        <div className="text-xs text-muted-foreground">{member.deals} negócios</div>
                      </div>
                      <div className="flex items-center pt-2">
                        <Progress value={member.completion} className="h-2" />
                        <span className="ml-2 text-xs text-muted-foreground">
                          {member.completion}% da meta
                        </span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="support" className="animate-fade-in">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle className="flex items-center">
                    <Trophy className="mr-2 h-5 w-5 text-yellow-500" />
                    Ranking de Atendimento
                  </CardTitle>
                  <CardDescription>
                    Desempenho dos atendentes em relação às metas do período atual
                  </CardDescription>
                </div>
                <div className="rounded-md bg-primary/10 px-3 py-1 text-sm font-medium text-primary">
                  Junho 2025
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-8">
                {supportData.map((member, index) => (
                  <div key={member.id} className="flex items-center">
                    <div className="mr-4 flex h-8 w-8 shrink-0 items-center justify-center rounded-full bg-primary/10 text-primary">
                      {index + 1}
                    </div>
                    <Avatar className="h-10 w-10 border-2 border-background">
                      <AvatarImage src={member.avatar} alt={member.name} />
                      <AvatarFallback>{member.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>
                    </Avatar>
                    <div className="ml-4 space-y-1 flex-1">
                      <div className="flex justify-between">
                        <p className="text-sm font-medium leading-none flex items-center">
                          {member.name}
                          {member.awards.length > 0 && (
                            <BadgeCheck className="ml-1 h-4 w-4 text-primary" />
                          )}
                          {member.trend !== 'same' && (
                            <span className={`ml-2 text-xs ${member.trend === 'up' ? 'text-emerald-500' : 'text-red-500'}`}>
                              {member.trend === 'up' ? '↑' : '↓'}
                            </span>
                          )}
                        </p>
                        <div className="text-sm text-muted-foreground">
                          {member.satisfaction}% satisfação
                        </div>
                      </div>
                      <div className="flex justify-between items-center">
                        <div className="text-xs text-muted-foreground">{member.role}</div>
                        <div className="text-xs text-muted-foreground">{member.tickets} tickets • {member.resolution}% resolução</div>
                      </div>
                      <div className="flex items-center pt-2">
                        <Progress value={member.completion} className="h-2" />
                        <span className="ml-2 text-xs text-muted-foreground">
                          {member.completion}% da meta
                        </span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};