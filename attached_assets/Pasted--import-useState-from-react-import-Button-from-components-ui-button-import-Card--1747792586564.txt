
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { ArrowLeft, Search, Filter, ChevronDown, ArrowDownUp } from "lucide-react";
import { useParams, useNavigate } from "react-router-dom";
import { automations } from "../data/mockAutomations";

// Mock log data
const mockLogs = [
  {
    id: "1",
    contactId: "c-001",
    contactName: "Maria Silva",
    entryTime: "2023-10-20T14:30:00Z",
    status: "completed",
    currentStep: "Fluxo completo",
    lastAction: "Email de conclusão enviado",
    nextAction: null
  },
  {
    id: "2",
    contactId: "c-002",
    contactName: "João Oliveira",
    entryTime: "2023-10-20T15:45:00Z",
    status: "active",
    currentStep: "Aguardando resposta",
    lastAction: "WhatsApp enviado",
    nextAction: "2023-10-22T15:45:00Z"
  },
  {
    id: "3",
    contactId: "c-003",
    contactName: "Ana Pereira",
    entryTime: "2023-10-20T16:20:00Z",
    status: "active",
    currentStep: "Delay de 2 dias",
    lastAction: "Contato adicionado à lista VIP",
    nextAction: "2023-10-22T16:20:00Z"
  },
  {
    id: "4",
    contactId: "c-004",
    contactName: "Carlos Santos",
    entryTime: "2023-10-19T09:15:00Z",
    status: "error",
    currentStep: "Erro ao enviar email",
    lastAction: "Tentativa de envio de email",
    nextAction: null
  },
  {
    id: "5",
    contactId: "c-005",
    contactName: "Fernanda Lima",
    entryTime: "2023-10-18T11:30:00Z",
    status: "completed",
    currentStep: "Fluxo completo",
    lastAction: "Lead convertido",
    nextAction: null
  }
];

const AutomationLogs = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [searchQuery, setSearchQuery] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  
  // Find the automation by id (would be an API call in a real app)
  const automation = automations.find(a => a.id === id) || {
    id: "unknown",
    name: "Automação não encontrada",
    description: "",
    status: "error",
    triggerName: "",
    triggerType: "contact",
    activeEntities: 0,
    completedEntities: 0,
    createdAt: "",
    updatedAt: "",
    createdBy: ""
  };
  
  // Filter logs
  const filteredLogs = mockLogs.filter(log => {
    // Filter by search query
    if (searchQuery && !log.contactName.toLowerCase().includes(searchQuery.toLowerCase())) {
      return false;
    }
    
    // Filter by status
    if (statusFilter !== "all" && log.status !== statusFilter) {
      return false;
    }
    
    return true;
  });
  
  // Status badge variations
  const getStatusBadge = (status: string) => {
    switch (status) {
      case "active":
        return <Badge className="bg-blue-500 hover:bg-blue-600">Em Andamento</Badge>;
      case "completed":
        return <Badge className="bg-green-500 hover:bg-green-600">Concluído</Badge>;
      case "error":
        return <Badge variant="destructive">Erro</Badge>;
      default:
        return <Badge variant="outline">{status}</Badge>;
    }
  };

  return (
    <div className="flex-1 space-y-4 p-4 md:p-8">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Button variant="outline" size="icon" onClick={() => navigate("/automations")}>
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <div>
            <h1 className="text-2xl font-bold tracking-tight">
              Logs: {automation.name}
            </h1>
            <div className="flex items-center gap-2 mt-1">
              <Badge variant={automation.status === "active" ? "default" : 
                     automation.status === "error" ? "destructive" : "outline"}>
                {automation.status === "active" ? "Ativo" : 
                 automation.status === "draft" ? "Rascunho" :
                 automation.status === "paused" ? "Pausado" :
                 automation.status === "error" ? "Erro" : automation.status}
              </Badge>
              <span className="text-sm text-muted-foreground">
                {automation.activeEntities} contatos ativos • {automation.completedEntities} concluídos
              </span>
            </div>
          </div>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" onClick={() => navigate(`/automations/editor/${id}`)}>
            Editar Automação
          </Button>
          <Button variant="outline" onClick={() => navigate(`/automations/stats/${id}`)}>
            Ver Estatísticas
          </Button>
        </div>
      </div>
      
      {/* Filters */}
      <div className="flex flex-col md:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500" />
          <Input
            type="search"
            placeholder="Buscar por nome do contato..."
            className="pl-8 w-full"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
        
        <Select value={statusFilter} onValueChange={setStatusFilter}>
          <SelectTrigger className="w-full md:w-[180px]">
            <div className="flex items-center gap-2">
              <Filter className="h-4 w-4" />
              <SelectValue placeholder="Filtrar por status" />
            </div>
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">Todos os Status</SelectItem>
            <SelectItem value="active">Em Andamento</SelectItem>
            <SelectItem value="completed">Concluídos</SelectItem>
            <SelectItem value="error">Com Erro</SelectItem>
          </SelectContent>
        </Select>
      </div>
      
      {/* Logs Table */}
      <Card>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[250px]">
                <div className="flex items-center gap-1">
                  Contato <ArrowDownUp className="h-3 w-3 ml-1" />
                </div>
              </TableHead>
              <TableHead>
                <div className="flex items-center gap-1">
                  Entrada <ArrowDownUp className="h-3 w-3 ml-1" />
                </div>
              </TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Etapa Atual</TableHead>
              <TableHead>Última Ação</TableHead>
              <TableHead>Próxima Ação</TableHead>
              <TableHead className="text-right">Ações</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredLogs.length === 0 ? (
              <TableRow>
                <TableCell colSpan={7} className="text-center py-10">
                  <div className="text-muted-foreground">
                    Nenhum log encontrado para os filtros aplicados.
                  </div>
                </TableCell>
              </TableRow>
            ) : (
              filteredLogs.map((log) => (
                <TableRow key={log.id}>
                  <TableCell className="font-medium">
                    <div className="flex flex-col">
                      {log.contactName}
                      <span className="text-xs text-muted-foreground">{log.contactId}</span>
                    </div>
                  </TableCell>
                  <TableCell>
                    {new Date(log.entryTime).toLocaleDateString()} {new Date(log.entryTime).toLocaleTimeString()}
                  </TableCell>
                  <TableCell>
                    {getStatusBadge(log.status)}
                  </TableCell>
                  <TableCell>{log.currentStep}</TableCell>
                  <TableCell>{log.lastAction}</TableCell>
                  <TableCell>
                    {log.nextAction ? (
                      <div className="flex flex-col">
                        {new Date(log.nextAction).toLocaleDateString()}
                        <span className="text-xs text-muted-foreground">
                          {new Date(log.nextAction).toLocaleTimeString()}
                        </span>
                      </div>
                    ) : (
                      <span className="text-muted-foreground">-</span>
                    )}
                  </TableCell>
                  <TableCell className="text-right">
                    <Button variant="ghost" size="sm">
                      Detalhes <ChevronDown className="h-4 w-4 ml-1" />
                    </Button>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </Card>
    </div>
  );
};

export default AutomationLogs;