import React, { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { useToast } from "@/hooks/use-toast";
import { useTheme } from "@/shared/providers/ThemeProvider";
import { Upload, Image, Save, Undo, CircleCheck, CircleX, Sun, Moon, Palette } from "lucide-react";

// Utility to check color contrast ratio
const getContrastRatio = (foreground: string, background: string) => {
  // Convert hex to RGB
  const hexToRgb = (hex: string) => {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
      r: parseInt(result[1], 16),
      g: parseInt(result[2], 16),
      b: parseInt(result[3], 16)
    } : { r: 0, g: 0, b: 0 };
  };

  // Calculate luminance
  const getLuminance = (color: { r: number, g: number, b: number }) => {
    const { r, g, b } = color;
    const a = [r, g, b].map(v => {
      v /= 255;
      return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
    });
    return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;
  };

  const rgb1 = hexToRgb(foreground);
  const rgb2 = hexToRgb(background);
  const l1 = getLuminance(rgb1);
  const l2 = getLuminance(rgb2);
  
  const ratio = (Math.max(l1, l2) + 0.05) / (Math.min(l1, l2) + 0.05);
  return parseFloat(ratio.toFixed(2));
};

// Determine if text should be white or black based on background color
const getTextColor = (backgroundColor: string) => {
  const rgb = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(backgroundColor);
  if (rgb) {
    const r = parseInt(rgb[1], 16);
    const g = parseInt(rgb[2], 16);
    const b = parseInt(rgb[3], 16);
    const brightness = (r * 299 + g * 587 + b * 114) / 1000;
    return brightness > 155 ? "#000000" : "#FFFFFF";
  }
  return "#FFFFFF";
};

// Determine conformance level
const getConformanceLevel = (ratio: number) => {
  // WCAG AA: Large text = 3:1, Normal text = 4.5:1
  // WCAG AAA: Large text = 4.5:1, Normal text = 7:1
  if (ratio >= 7) return { normal: { aa: true, aaa: true }, large: { aa: true, aaa: true } };
  if (ratio >= 4.5) return { normal: { aa: true, aaa: false }, large: { aa: true, aaa: true } };
  if (ratio >= 3) return { normal: { aa: false, aaa: false }, large: { aa: true, aaa: false } };
  return { normal: { aa: false, aaa: false }, large: { aa: false, aaa: false } };
};

export const BrandingTab = () => {
  const { toast } = useToast();
  const { theme, setTheme } = useTheme();
  
  const [primaryColor, setPrimaryColor] = useState("#8B5CF6");
  const [secondaryColor, setSecondaryColor] = useState("#D946EF");
  const [originalPrimaryColor, setOriginalPrimaryColor] = useState("#8B5CF6");
  const [originalSecondaryColor, setOriginalSecondaryColor] = useState("#D946EF");
  const [isLogoModalOpen, setIsLogoModalOpen] = useState(false);
  const [isFaviconModalOpen, setIsFaviconModalOpen] = useState(false);
  const [logoPreview, setLogoPreview] = useState<string | null>(null);
  const [faviconPreview, setFaviconPreview] = useState<string | null>(null);
  const [defaultTheme, setDefaultTheme] = useState<"light" | "dark" | "system">(theme || "light");
  const [hasChanges, setHasChanges] = useState(false);

  // Calculate contrast ratios
  const primaryTextContrast = getContrastRatio(
    getTextColor(primaryColor), 
    primaryColor
  );
  const secondaryTextContrast = getContrastRatio(
    getTextColor(secondaryColor), 
    secondaryColor
  );
  const primaryTextOnLight = getContrastRatio(primaryColor, "#FFFFFF");
  const primaryTextOnDark = getContrastRatio(primaryColor, "#1A1F2C");
  const secondaryTextOnLight = getContrastRatio(secondaryColor, "#FFFFFF");
  const secondaryTextOnDark = getContrastRatio(secondaryColor, "#1A1F2C");

  // Get conformance levels
  const primaryConformance = getConformanceLevel(primaryTextContrast);
  const secondaryConformance = getConformanceLevel(secondaryTextContrast);

  useEffect(() => {
    // Check if there are any changes
    if (
      primaryColor !== originalPrimaryColor || 
      secondaryColor !== originalSecondaryColor || 
      defaultTheme !== theme
    ) {
      setHasChanges(true);
    } else {
      setHasChanges(false);
    }
    
    // Update CSS variables for real-time preview
    document.documentElement.style.setProperty('--preview-primary', primaryColor);
    document.documentElement.style.setProperty('--preview-primary-foreground', getTextColor(primaryColor));
    document.documentElement.style.setProperty('--preview-secondary', secondaryColor);
    document.documentElement.style.setProperty('--preview-secondary-foreground', getTextColor(secondaryColor));
  }, [primaryColor, secondaryColor, defaultTheme, originalPrimaryColor, originalSecondaryColor, theme]);

  const handleLogoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      // Check file size (max 2MB)
      if (file.size > 2 * 1024 * 1024) {
        toast({
          title: "Arquivo muito grande",
          description: "O tamanho máximo do arquivo é 2MB.",
          variant: "destructive"
        });
        return;
      }

      // Check file type
      if (!['image/png', 'image/jpeg', 'image/svg+xml'].includes(file.type)) {
        toast({
          title: "Formato não suportado",
          description: "Por favor, faça upload de arquivos PNG, JPG ou SVG.",
          variant: "destructive"
        });
        return;
      }

      const reader = new FileReader();
      reader.onload = (e) => {
        if (e.target?.result) {
          setLogoPreview(e.target.result as string);
          setHasChanges(true);
        }
      };
      reader.readAsDataURL(file);
    }
  };

  const handleFaviconUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      // Check file size (max 1MB)
      if (file.size > 1 * 1024 * 1024) {
        toast({
          title: "Arquivo muito grande",
          description: "O tamanho máximo do arquivo é 1MB.",
          variant: "destructive"
        });
        return;
      }

      // Check file type
      if (!['image/png', 'image/jpeg'].includes(file.type)) {
        toast({
          title: "Formato não suportado",
          description: "Por favor, faça upload de arquivos PNG ou JPG. Formatos ICO não são suportados.",
          variant: "destructive"
        });
        return;
      }

      const reader = new FileReader();
      reader.onload = (e) => {
        if (e.target?.result) {
          setFaviconPreview(e.target.result as string);
          setHasChanges(true);
        }
      };
      reader.readAsDataURL(file);
    }
  };

  const handleRemoveLogo = () => {
    setLogoPreview(null);
    setHasChanges(true);
    setIsLogoModalOpen(false);
    toast({
      title: "Logo removido",
      description: "O logo foi removido com sucesso."
    });
  };

  const handleRemoveFavicon = () => {
    setFaviconPreview(null);
    setHasChanges(true);
    setIsFaviconModalOpen(false);
    toast({
      title: "Favicon removido",
      description: "O favicon foi removido com sucesso."
    });
  };

  const handleSaveChanges = () => {
    // Here you would save changes to your backend
    setOriginalPrimaryColor(primaryColor);
    setOriginalSecondaryColor(secondaryColor);
    
    // Apply theme change if needed
    if (theme !== defaultTheme) {
      setTheme(defaultTheme);
    }

    setHasChanges(false);
    toast({
      title: "Alterações salvas",
      description: "As configurações de aparência foram salvas com sucesso."
    });
  };

  const handleResetToDefaults = () => {
    setPrimaryColor("#8B5CF6");
    setSecondaryColor("#D946EF");
    setLogoPreview(null);
    setFaviconPreview(null);
    setDefaultTheme("system");
    setHasChanges(true);
    
    toast({
      title: "Configurações resetadas",
      description: "Todas as configurações de aparência foram restauradas para o padrão do sistema."
    });
  };

  const handleThemeChange = (value: string) => {
    setDefaultTheme(value as "light" | "dark" | "system");
  };

  const renderContrastStatus = (ratio: number, type: 'normal' | 'large', level: 'aa' | 'aaa') => {
    const conformance = getConformanceLevel(ratio);
    return conformance[type][level] ? (
      <span className="text-green-500 inline-flex items-center gap-1">
        <CircleCheck className="h-4 w-4" /> 
        Passa {level.toUpperCase()}
      </span>
    ) : (
      <span className="text-orange-500 inline-flex items-center gap-1">
        <CircleX className="h-4 w-4" /> 
        Falha {level.toUpperCase()}
      </span>
    );
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Aparência e Branding</CardTitle>
        <CardDescription>
          Personalize a aparência do sistema para sua marca
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Logo Upload Section */}
        <div>
          <h3 className="text-lg font-medium mb-3">Logo da Empresa</h3>
          <div className="flex items-center gap-4">
            <div className="h-16 w-48 border rounded-md flex items-center justify-center bg-gray-100 overflow-hidden">
              {logoPreview ? (
                <img 
                  src={logoPreview} 
                  alt="Logo da empresa" 
                  className="h-full object-contain" 
                />
              ) : (
                <span className="text-sm text-muted-foreground">Sem logo</span>
              )}
            </div>
            <div className="flex gap-2">
              <Button variant="outline" onClick={() => setIsLogoModalOpen(true)}>
                <Upload className="h-4 w-4 mr-2" /> 
                Carregar Logo
              </Button>
              {logoPreview && (
                <Button variant="outline" onClick={handleRemoveLogo}>
                  Remover
                </Button>
              )}
            </div>
          </div>
          <p className="text-sm text-muted-foreground mt-2">
            Recomendado: arquivo PNG ou SVG com fundo transparente, mínimo 200px de largura.
          </p>
        </div>
        
        <Separator />
        
        {/* Colors Section */}
        <div>
          <h3 className="text-lg font-medium mb-3">Cores do Sistema</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <Label>Cor Primária</Label>
              <div className="flex items-center gap-3">
                <div 
                  className="h-10 w-10 rounded-md border"
                  style={{ backgroundColor: primaryColor }}
                />
                <Input 
                  type="text" 
                  value={primaryColor} 
                  onChange={(e) => setPrimaryColor(e.target.value)} 
                  className="w-32" 
                />
                <Input 
                  type="color" 
                  value={primaryColor} 
                  onChange={(e) => setPrimaryColor(e.target.value)} 
                  className="w-10 h-10 p-1" 
                />
                <Palette className="h-5 w-5 text-muted-foreground" />
              </div>
              <div className="text-sm">
                <div className="mb-2">Contraste com texto:</div>
                <div className="grid grid-cols-1 gap-1">
                  <div className="flex items-center gap-2">
                    {renderContrastStatus(primaryTextContrast, 'normal', 'aa')}
                    {renderContrastStatus(primaryTextContrast, 'normal', 'aaa')}
                    <span className="text-muted-foreground ml-2">Ratio: {primaryTextContrast}:1</span>
                  </div>
                </div>
              </div>
            </div>
            <div className="space-y-4">
              <Label>Cor Secundária</Label>
              <div className="flex items-center gap-3">
                <div 
                  className="h-10 w-10 rounded-md border"
                  style={{ backgroundColor: secondaryColor }}
                />
                <Input 
                  type="text" 
                  value={secondaryColor} 
                  onChange={(e) => setSecondaryColor(e.target.value)} 
                  className="w-32" 
                />
                <Input 
                  type="color" 
                  value={secondaryColor} 
                  onChange={(e) => setSecondaryColor(e.target.value)} 
                  className="w-10 h-10 p-1" 
                />
                <Palette className="h-5 w-5 text-muted-foreground" />
              </div>
              <div className="text-sm">
                <div className="mb-2">Contraste com texto:</div>
                <div className="grid grid-cols-1 gap-1">
                  <div className="flex items-center gap-2">
                    {renderContrastStatus(secondaryTextContrast, 'normal', 'aa')}
                    {renderContrastStatus(secondaryTextContrast, 'normal', 'aaa')}
                    <span className="text-muted-foreground ml-2">Ratio: {secondaryTextContrast}:1</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <Separator />
        
        {/* Visual Interface Preview */}
        <div>
          <h3 className="text-lg font-medium mb-3">Visualização em Tempo Real</h3>
          <div className="border rounded-md p-6">
            {/* Header preview */}
            <div 
              className="mb-6 px-4 py-3 rounded-md flex items-center justify-between"
              style={{ 
                backgroundColor: primaryColor,
                color: getTextColor(primaryColor)
              }}
            >
              <div className="flex items-center gap-3">
                {logoPreview ? (
                  <img src={logoPreview} alt="Logo" className="h-8" />
                ) : (
                  <div className="h-8 w-24 bg-white/20 rounded flex items-center justify-center text-sm">Logo</div>
                )}
                <h2 className="font-semibold">Dashboard</h2>
              </div>
              <div className="flex items-center gap-2">
                <div className="h-8 w-8 rounded-full bg-white/20"></div>
              </div>
            </div>
            
            {/* UI Components preview */}
            <div className="space-y-4">
              {/* Buttons */}
              <div className="flex gap-4 mb-4">
                <button 
                  className="px-4 py-2 rounded font-medium transition-colors"
                  style={{ 
                    backgroundColor: primaryColor,
                    color: getTextColor(primaryColor)
                  }}
                >
                  Botão Primário
                </button>
                <button 
                  className="px-4 py-2 rounded font-medium transition-colors"
                  style={{ 
                    backgroundColor: secondaryColor,
                    color: getTextColor(secondaryColor)
                  }}
                >
                  Botão Secundário
                </button>
                <button 
                  className="px-4 py-2 rounded font-medium border transition-colors"
                  style={{ 
                    borderColor: primaryColor,
                    color: primaryColor
                  }}
                >
                  Botão Outline
                </button>
              </div>
              
              {/* Text and links */}
              <div className="flex flex-col gap-2">
                <p className="text-lg font-bold">Textos de Título</p>
                <p className="text-muted-foreground">Textos secundários e descrições</p>
                <p>
                  Este é um texto normal com um{" "}
                  <a href="#" style={{ color: primaryColor }}>link de exemplo</a>{" "}
                  que usa a cor primária.
                </p>
                <div className="flex gap-2 mt-2">
                  <span 
                    className="px-2 py-1 rounded text-sm"
                    style={{ 
                      backgroundColor: primaryColor,
                      color: getTextColor(primaryColor)
                    }}
                  >
                    Tag Primária
                  </span>
                  <span 
                    className="px-2 py-1 rounded text-sm"
                    style={{ 
                      backgroundColor: secondaryColor,
                      color: getTextColor(secondaryColor)
                    }}
                  >
                    Tag Secundária
                  </span>
                </div>
              </div>

              {/* Tabs example */}
              <div className="border-b">
                <div className="flex">
                  <div 
                    className="px-4 py-2 font-medium border-b-2 -mb-px"
                    style={{ borderColor: primaryColor }}
                  >
                    Aba Ativa
                  </div>
                  <div className="px-4 py-2 text-muted-foreground">
                    Aba Inativa
                  </div>
                </div>
              </div>

              {/* Card example */}
              <div className="border rounded-md p-4 mt-4">
                <div className="font-medium mb-2">Card de Exemplo</div>
                <p className="text-sm text-muted-foreground mb-3">Descrição do card</p>
                <button 
                  className="px-3 py-1 rounded text-sm font-medium transition-colors"
                  style={{ 
                    backgroundColor: primaryColor,
                    color: getTextColor(primaryColor)
                  }}
                >
                  Ação
                </button>
              </div>
            </div>
          </div>
          <p className="text-sm text-muted-foreground mt-2">
            Este preview mostra como suas escolhas de cores afetam os elementos de interface em tempo real.
          </p>
        </div>
        
        <Separator />
        
        {/* Favicon Section */}
        <div>
          <h3 className="text-lg font-medium mb-3">Favicon</h3>
          <div className="flex items-center gap-4">
            <div className="h-10 w-10 border rounded-md flex items-center justify-center bg-gray-100 overflow-hidden">
              {faviconPreview ? (
                <img 
                  src={faviconPreview} 
                  alt="Favicon" 
                  className="h-full w-full object-cover" 
                />
              ) : (
                <span className="text-xs text-muted-foreground">Icon</span>
              )}
            </div>
            <div className="flex gap-2">
              <Button variant="outline" onClick={() => setIsFaviconModalOpen(true)}>
                <Upload className="h-4 w-4 mr-2" /> 
                Carregar Favicon
              </Button>
              {faviconPreview && (
                <Button variant="outline" onClick={handleRemoveFavicon}>
                  Remover
                </Button>
              )}
            </div>
          </div>
          <p className="text-sm text-muted-foreground mt-2">
            Recomendado: arquivo PNG de 32x32 ou 16x16 pixels.
            <br />
            <span className="text-orange-500">Nota: Arquivos .ico não são suportados, use PNG.</span>
          </p>
        </div>

        <Separator />

        {/* Theme Selection Section */}
        <div>
          <h3 className="text-lg font-medium mb-3">Tema Visual Padrão</h3>
          <RadioGroup 
            defaultValue={defaultTheme} 
            onValueChange={handleThemeChange}
            className="grid grid-cols-1 md:grid-cols-3 gap-4"
          >
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="light" id="theme-light" />
              <Label htmlFor="theme-light" className="flex items-center gap-2">
                <Sun className="h-4 w-4" /> Claro
              </Label>
            </div>
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="dark" id="theme-dark" />
              <Label htmlFor="theme-dark" className="flex items-center gap-2">
                <Moon className="h-4 w-4" /> Escuro
              </Label>
            </div>
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="system" id="theme-system" />
              <Label htmlFor="theme-system" className="flex items-center gap-2">
                <span className="flex">
                  <Sun className="h-4 w-4" />
                  <Moon className="h-4 w-4 ml-1" />
                </span>
                Sistema (Automático)
              </Label>
            </div>
          </RadioGroup>
          <p className="text-sm text-muted-foreground mt-2">
            Define o tema visual padrão para todos os usuários do tenant. Os usuários ainda podem escolher suas próprias preferências.
          </p>
        </div>
        
        <Separator />

        {/* Action Buttons */}
        <div className="pt-4 flex flex-wrap gap-4">
          <Button 
            onClick={handleSaveChanges} 
            disabled={!hasChanges}
            className="flex items-center gap-2"
          >
            <Save className="h-4 w-4" /> Salvar Alterações de Aparência
          </Button>
          <Button 
            variant="outline" 
            onClick={handleResetToDefaults}
            className="flex items-center gap-2"
          >
            <Undo className="h-4 w-4" /> Restaurar Padrões do Sistema
          </Button>
        </div>
      </CardContent>

      {/* Logo Upload Modal */}
      <Dialog open={isLogoModalOpen} onOpenChange={setIsLogoModalOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Fazer upload do logo</DialogTitle>
            <DialogDescription>
              Selecione uma imagem para usar como logo da sua empresa na plataforma.
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <div className="flex flex-col items-center justify-center border-2 border-dashed rounded-md p-6 cursor-pointer">
              <Input 
                type="file" 
                id="logo-upload" 
                className="hidden" 
                accept=".png,.jpg,.jpeg,.svg" 
                onChange={handleLogoUpload} 
              />
              <Label htmlFor="logo-upload" className="cursor-pointer flex flex-col items-center">
                <Upload className="h-8 w-8 mb-2 text-muted-foreground" />
                <span className="text-sm font-medium mb-1">Clique para selecionar um arquivo</span>
                <span className="text-xs text-muted-foreground">PNG, JPG ou SVG (máx. 2MB)</span>
              </Label>
            </div>
            
            {logoPreview && (
              <div className="mt-4">
                <h4 className="text-sm font-medium mb-2">Preview:</h4>
                <div className="h-24 border rounded flex items-center justify-center p-2 overflow-hidden">
                  <img src={logoPreview} alt="Logo preview" className="max-h-full" />
                </div>
              </div>
            )}
          </div>
          <DialogFooter className="flex justify-between">
            <Button variant="outline" onClick={() => setIsLogoModalOpen(false)}>
              Cancelar
            </Button>
            <Button 
              onClick={() => setIsLogoModalOpen(false)}
              disabled={!logoPreview}
            >
              Aplicar Logo
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Favicon Upload Modal */}
      <Dialog open={isFaviconModalOpen} onOpenChange={setIsFaviconModalOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Fazer upload do favicon</DialogTitle>
            <DialogDescription>
              Selecione uma imagem para usar como ícone na aba do navegador.
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <div className="flex flex-col items-center justify-center border-2 border-dashed rounded-md p-6 cursor-pointer">
              <Input 
                type="file" 
                id="favicon-upload" 
                className="hidden" 
                accept=".png,.jpg,.jpeg" 
                onChange={handleFaviconUpload} 
              />
              <Label htmlFor="favicon-upload" className="cursor-pointer flex flex-col items-center">
                <Image className="h-8 w-8 mb-2 text-muted-foreground" />
                <span className="text-sm font-medium mb-1">Clique para selecionar um arquivo</span>
                <span className="text-xs text-muted-foreground">PNG ou JPG (máx. 1MB)</span>
                <span className="text-xs text-orange-500 mt-1">Arquivos .ico não são suportados</span>
              </Label>
            </div>
            
            {faviconPreview && (
              <div className="mt-4">
                <h4 className="text-sm font-medium mb-2">Preview:</h4>
                <div className="border rounded flex items-center justify-center p-2">
                  <div className="flex flex-col items-center">
                    <img src={faviconPreview} alt="Favicon preview" className="h-10 w-10 object-contain mb-1" />
                    <span className="text-xs text-muted-foreground">Tamanho real: 16x16 ou 32x32 px</span>
                  </div>
                </div>
              </div>
            )}
          </div>
          <DialogFooter className="flex justify-between">
            <Button variant="outline" onClick={() => setIsFaviconModalOpen(false)}>
              Cancelar
            </Button>
            <Button 
              onClick={() => setIsFaviconModalOpen(false)}
              disabled={!faviconPreview}
            >
              Aplicar Favicon
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </Card>
  );
};
