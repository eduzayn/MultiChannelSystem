import React, { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  MessageSquare,
  Instagram,
  Mail,
  Phone,
  Facebook,
  MessageSquareText,
  Edit,
  RefreshCw,
  Check,
  Bell,
  Trash2,
  ToggleRight,
  ToggleLeft,
  Settings,
  QrCode
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { QRCodeSVG } from "qrcode.react";

export const ChannelsTab = () => {
  // Estados principais
  const [openAddChannelDialog, setOpenAddChannelDialog] = useState(false);
  const [openChannelConfigDialog, setOpenChannelConfigDialog] = useState(false);
  const [selectedChannelType, setSelectedChannelType] = useState<string | null>(null);
  const [currentStep, setCurrentStep] = useState(1);
  const [selectedProvider, setSelectedProvider] = useState<string | null>(null);
  const [channelConfigData, setChannelConfigData] = useState({
    name: "",
    identifier: "",
    webhookUrl: "https://api.minhaempresa.com/webhooks/tenant/123/channel/456",
    apiKey: "",
    clientToken: "",
    smtpServer: "",
    smtpPort: "",
    imapServer: "",
    imapPort: "",
    username: "",
    password: ""
  });
  const [showQRCode, setShowQRCode] = useState(false);
  const [qrCodeStatus, setQRCodeStatus] = useState("waiting");
  const [channelFormTab, setChannelFormTab] = useState("credentials");
  
  const { toast } = useToast();

  // Função para selecionar o tipo de canal
  const handleSelectChannelType = (channelType: string) => {
    setSelectedChannelType(channelType);
    setCurrentStep(channelType === "WhatsApp" ? 2 : 3); // Se for WhatsApp, vai para seleção de provedor
  };

  // Função para selecionar o provedor (apenas para WhatsApp)
  const handleSelectProvider = (provider: string) => {
    setSelectedProvider(provider);
    setCurrentStep(3);
  };

  // Função para voltar ao passo anterior
  const handleBackStep = () => {
    if (currentStep === 2) {
      setSelectedChannelType(null);
      setCurrentStep(1);
    } else if (currentStep === 3) {
      if (selectedChannelType === "WhatsApp") {
        setSelectedProvider(null);
        setCurrentStep(2);
      } else {
        setSelectedChannelType(null);
        setCurrentStep(1);
      }
    } else if (currentStep === 4) {
      setCurrentStep(3);
    }
  };

  // Função para avançar ao próximo passo
  const handleNextStep = () => {
    if (currentStep < 4) {
      setCurrentStep(currentStep + 1);
    }
  };

  // Função para simular a geração de QR Code para Z-API
  const handleGenerateQRCode = () => {
    if (channelConfigData.clientToken.trim() === "") {
      toast({
        title: "Erro",
        description: "O Client Token da Z-API é obrigatório para gerar o QR Code.",
        variant: "destructive"
      });
      return;
    }
    
    setShowQRCode(true);
    setQRCodeStatus("waiting");
    
    // Em um ambiente real, aqui seria feita uma chamada à API Z-API para obter o QR Code
    // Simulando o processo de obtenção do QR Code
    setTimeout(() => {
      setQRCodeStatus("authenticating");
      setTimeout(() => {
        setQRCodeStatus("connected");
        // Atualiza o identificador com um número fictício
        setChannelConfigData({
          ...channelConfigData,
          identifier: "+55 11 98765-4321"
        });
      }, 3000);
    }, 2000);
  };

  // Função para processar o formulário de credenciais
  const handleCredentialsSubmit = () => {
    // Validação básica
    if (channelConfigData.name.trim() === "") {
      toast({
        title: "Campo obrigatório",
        description: "O nome personalizado do canal é obrigatório.",
        variant: "destructive"
      });
      return;
    }

    // Diferentes validações baseadas no tipo de canal
    if (selectedChannelType === "WhatsApp") {
      if (selectedProvider === "api" && channelConfigData.apiKey.trim() === "") {
        toast({
          title: "Campo obrigatório", 
          description: "A API Key é obrigatória para WhatsApp API Oficial.",
          variant: "destructive"
        });
        return;
      } else if (selectedProvider === "zapi" && !showQRCode) {
        toast({
          title: "QR Code necessário", 
          description: "Você precisa gerar e escanear o QR Code para conectar via Z-API.",
          variant: "destructive"
        });
        return;
      }
    } else if (selectedChannelType === "Email") {
      if (channelConfigData.smtpServer.trim() === "" || channelConfigData.username.trim() === "") {
        toast({
          title: "Campos obrigatórios", 
          description: "Os dados de configuração do servidor SMTP são obrigatórios.",
          variant: "destructive"
        });
        return;
      }
    }

    // Se tudo estiver ok, avança para próxima etapa
    handleNextStep();
  };

  // Função para finalizar e salvar o canal
  const handleSaveChannel = () => {
    toast({
      title: "Canal salvo com sucesso!",
      description: `O canal ${channelConfigData.name} foi configurado e está ativo.`
    });
    
    // Fecha os diálogos e reseta os estados
    setOpenAddChannelDialog(false);
    setOpenChannelConfigDialog(false);
    setCurrentStep(1);
    setSelectedChannelType(null);
    setSelectedProvider(null);
    setChannelConfigData({
      name: "",
      identifier: "",
      webhookUrl: "https://api.minhaempresa.com/webhooks/tenant/123/channel/456",
      apiKey: "",
      clientToken: "",
      smtpServer: "",
      smtpPort: "",
      imapServer: "",
      imapPort: "",
      username: "",
      password: ""
    });
    setShowQRCode(false);
    setQRCodeStatus("waiting");
    setChannelFormTab("credentials");
  };

  // Renderiza o formulário específico para cada canal/provedor
  const renderChannelConfigForm = () => {
    if (selectedChannelType === "WhatsApp" && selectedProvider === "api") {
      return (
        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="channel-name">Nome Personalizado do Canal</Label>
            <Input 
              id="channel-name" 
              placeholder="Ex: WhatsApp Vendas - API Oficial" 
              value={channelConfigData.name}
              onChange={(e) => setChannelConfigData({...channelConfigData, name: e.target.value})}
            />
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="phone-number">Número de Telefone WhatsApp Business</Label>
            <Input 
              id="phone-number" 
              placeholder="+55 11 98765-4321" 
              value={channelConfigData.identifier}
              onChange={(e) => setChannelConfigData({...channelConfigData, identifier: e.target.value})}
            />
            <p className="text-sm text-muted-foreground">Número oficial com DDI ativado na API.</p>
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="api-key">API Key</Label>
            <Input 
              id="api-key" 
              type="password" 
              placeholder="API Key do provedor oficial" 
              value={channelConfigData.apiKey}
              onChange={(e) => setChannelConfigData({...channelConfigData, apiKey: e.target.value})}
            />
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="webhook-url">URL de Webhook (Copie para o painel do provedor)</Label>
            <div className="flex">
              <Input 
                id="webhook-url" 
                readOnly 
                value={channelConfigData.webhookUrl}
              />
              <Button 
                variant="outline" 
                className="ml-2"
                onClick={() => {
                  navigator.clipboard.writeText(channelConfigData.webhookUrl);
                  toast({
                    title: "URL copiada!",
                    description: "A URL de webhook foi copiada para a área de transferência."
                  });
                }}
              >
                Copiar
              </Button>
            </div>
            <p className="text-sm text-muted-foreground">
              Configure esta URL na plataforma do provedor para receber mensagens e atualizações de status.
            </p>
          </div>
          
          <div className="flex justify-end mt-6">
            <Button variant="outline" onClick={() => {
              toast({
                title: "Testando conexão...",
                description: "Verificando as credenciais com o provedor..."
              });
              
              setTimeout(() => {
                toast({
                  title: "Conexão bem sucedida!",
                  description: "As credenciais estão corretas e a conexão foi estabelecida."
                });
              }, 1500);
            }}>
              Testar Conexão
            </Button>
          </div>
        </div>
      );
    } else if (selectedChannelType === "WhatsApp" && selectedProvider === "zapi") {
      return (
        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="channel-name-zapi">Nome Personalizado do Canal</Label>
            <Input 
              id="channel-name-zapi" 
              placeholder="Ex: WhatsApp Suporte - Z-API" 
              value={channelConfigData.name}
              onChange={(e) => setChannelConfigData({...channelConfigData, name: e.target.value})}
            />
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="client-token">Client Token Z-API</Label>
            <Input 
              id="client-token" 
              type="password" 
              placeholder="Client Token da instância Z-API" 
              value={channelConfigData.clientToken}
              onChange={(e) => setChannelConfigData({...channelConfigData, clientToken: e.target.value})}
            />
            <p className="text-sm text-muted-foreground">
              Token fornecido pela Z-API para acessar sua instância.
            </p>
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="webhook-url-zapi">URL de Webhook (Copie para o painel Z-API)</Label>
            <div className="flex">
              <Input 
                id="webhook-url-zapi" 
                readOnly 
                value={channelConfigData.webhookUrl}
              />
              <Button 
                variant="outline" 
                className="ml-2"
                onClick={() => {
                  navigator.clipboard.writeText(channelConfigData.webhookUrl);
                  toast({
                    title: "URL copiada!",
                    description: "A URL de webhook foi copiada para a área de transferência."
                  });
                }}
              >
                Copiar
              </Button>
            </div>
            <p className="text-sm text-muted-foreground">
              Configure esta URL no painel da Z-API para receber mensagens e eventos.
            </p>
          </div>
          
          <div className="mt-6">
            <Button 
              onClick={handleGenerateQRCode}
              className="w-full"
            >
              <QrCode className="h-4 w-4 mr-2" />
              Gerar QR Code para Conexão
            </Button>
          </div>
          
          {showQRCode && (
            <div className="mt-4 border rounded-lg p-6 flex flex-col items-center">
              <div className="w-48 h-48 relative">
                {qrCodeStatus === "waiting" && (
                  <div className="w-full h-full flex items-center justify-center">
                    <div className="text-center">
                      <p className="text-sm text-muted-foreground">Carregando QR Code...</p>
                      <div className="animate-spin h-6 w-6 border-2 border-primary rounded-full border-t-transparent mx-auto mt-2"></div>
                    </div>
                  </div>
                )}
                {qrCodeStatus === "authenticating" && (
                  <div className="w-full h-full flex items-center justify-center">
                    {/* QR Code real usando a biblioteca qrcode.react */}
                    <QRCodeSVG 
                      value={`https://api.z-api.io/instances/connect?token=${channelConfigData.clientToken}`}
                      size={192}
                      bgColor={"#ffffff"}
                      fgColor={"#000000"}
                      level={"L"}
                      includeMargin={true}
                    />
                  </div>
                )}
                {qrCodeStatus === "connected" && (
                  <div className="w-full h-full flex items-center justify-center bg-green-50 rounded-lg">
                    <div className="text-center">
                      <Check className="h-16 w-16 text-green-500 mx-auto" />
                      <p className="text-sm font-medium text-green-800 mt-2">WhatsApp Conectado</p>
                    </div>
                  </div>
                )}
              </div>
              
              <div className="mt-4 text-center">
                {qrCodeStatus === "waiting" && <p>Aguardando geração do QR Code...</p>}
                {qrCodeStatus === "authenticating" && (
                  <div>
                    <Badge className="bg-yellow-500">Aguardando escaneamento</Badge>
                    <p className="mt-1 text-sm">Escaneie este QR Code no seu WhatsApp</p>
                  </div>
                )}
                {qrCodeStatus === "connected" && (
                  <div>
                    <Badge className="bg-green-500">Conectado com Sucesso!</Badge>
                    <p className="mt-1 text-sm">
                      WhatsApp conectado como: {channelConfigData.identifier}
                    </p>
                  </div>
                )}
              </div>
              
              {qrCodeStatus !== "connected" && (
                <p className="text-sm text-muted-foreground mt-2">
                  Abra o WhatsApp no seu celular, vá para Configurações &gt; WhatsApp Web e escaneie o QR Code.
                </p>
              )}
              
              <Button 
                variant="outline" 
                size="sm" 
                className="mt-4"
                onClick={handleGenerateQRCode}
              >
                <RefreshCw className="h-4 w-4 mr-2" />
                Gerar Novo QR Code
              </Button>
            </div>
          )}
        </div>
      );
    } else if (selectedChannelType === "Email") {
      return (
        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="email-channel-name">Nome Personalizado do Canal</Label>
            <Input 
              id="email-channel-name" 
              placeholder="Ex: Email Suporte Corporativo" 
              value={channelConfigData.name}
              onChange={(e) => setChannelConfigData({...channelConfigData, name: e.target.value})}
            />
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="email-address">Endereço de Email</Label>
            <Input 
              id="email-address" 
              placeholder="suporte@minhaempresa.com" 
              type="email"
              value={channelConfigData.identifier}
              onChange={(e) => setChannelConfigData({...channelConfigData, identifier: e.target.value})}
            />
          </div>
          
          <div className="space-y-2">
            <Label>Método de Conexão</Label>
            <RadioGroup 
              defaultValue="manual" 
              className="space-y-2"
            >
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="google" id="google" />
                <Label htmlFor="google">Google (Gmail/Workspace)</Label>
                <Button variant="outline" size="sm" className="ml-2" disabled>
                  Conectar com Google
                </Button>
                <Badge variant="outline">Em breve</Badge>
              </div>
              
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="microsoft" id="microsoft" />
                <Label htmlFor="microsoft">Microsoft (Outlook/365)</Label>
                <Button variant="outline" size="sm" className="ml-2" disabled>
                  Conectar com Microsoft
                </Button>
                <Badge variant="outline">Em breve</Badge>
              </div>
              
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="manual" id="manual" />
                <Label htmlFor="manual">Configurar Manualmente (SMTP/IMAP)</Label>
              </div>
            </RadioGroup>
          </div>
          
          <div className="border p-4 rounded-md space-y-4">
            <h4 className="font-medium">Configurações SMTP (Envio)</h4>
            
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="smtp-server">Servidor SMTP</Label>
                <Input 
                  id="smtp-server" 
                  placeholder="smtp.gmail.com" 
                  value={channelConfigData.smtpServer}
                  onChange={(e) => setChannelConfigData({...channelConfigData, smtpServer: e.target.value})}
                />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="smtp-port">Porta SMTP</Label>
                <Input 
                  id="smtp-port" 
                  placeholder="587" 
                  value={channelConfigData.smtpPort}
                  onChange={(e) => setChannelConfigData({...channelConfigData, smtpPort: e.target.value})}
                />
              </div>
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="smtp-username">Usuário SMTP</Label>
              <Input 
                id="smtp-username" 
                placeholder="seu.email@gmail.com" 
                value={channelConfigData.username}
                onChange={(e) => setChannelConfigData({...channelConfigData, username: e.target.value})}
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="smtp-password">Senha SMTP</Label>
              <Input 
                id="smtp-password" 
                type="password" 
                placeholder="Senha ou Senha de Aplicativo" 
                value={channelConfigData.password}
                onChange={(e) => setChannelConfigData({...channelConfigData, password: e.target.value})}
              />
              <p className="text-sm text-muted-foreground">
                Para Gmail, recomendamos usar uma Senha de Aplicativo.
              </p>
            </div>
          </div>
          
          <div className="border p-4 rounded-md space-y-4">
            <h4 className="font-medium">Configurações IMAP (Recebimento)</h4>
            
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="imap-server">Servidor IMAP</Label>
                <Input 
                  id="imap-server" 
                  placeholder="imap.gmail.com" 
                  value={channelConfigData.imapServer}
                  onChange={(e) => setChannelConfigData({...channelConfigData, imapServer: e.target.value})}
                />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="imap-port">Porta IMAP</Label>
                <Input 
                  id="imap-port" 
                  placeholder="993" 
                  value={channelConfigData.imapPort}
                  onChange={(e) => setChannelConfigData({...channelConfigData, imapPort: e.target.value})}
                />
              </div>
            </div>
          </div>
          
          <div className="flex justify-end mt-4">
            <Button 
              variant="outline"
              onClick={() => {
                toast({
                  title: "Testando conexão...",
                  description: "Verificando as configurações SMTP/IMAP..."
                });
                
                setTimeout(() => {
                  if (channelConfigData.smtpServer && channelConfigData.username) {
                    toast({
                      title: "Conexão bem sucedida!",
                      description: "As credenciais estão corretas e a conexão foi estabelecida."
                    });
                  } else {
                    toast({
                      title: "Falha na conexão",
                      description: "Verifique as configurações e tente novamente.",
                      variant: "destructive"
                    });
                  }
                }, 1500);
              }}
            >
              Testar Conexão SMTP/IMAP
            </Button>
          </div>
        </div>
      );
    } else if (selectedChannelType === "SMS" || selectedChannelType === "Telefonia") {
      return (
        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="channel-name-twilio">Nome Personalizado do Canal</Label>
            <Input 
              id="channel-name-twilio" 
              placeholder={`Ex: ${selectedChannelType === "SMS" ? "SMS Marketing" : "Central de Atendimento"}`}
              value={channelConfigData.name}
              onChange={(e) => setChannelConfigData({...channelConfigData, name: e.target.value})}
            />
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="phone-number-twilio">Número de Telefone</Label>
            <Input 
              id="phone-number-twilio" 
              placeholder="+55 11 98765-4321" 
              value={channelConfigData.identifier}
              onChange={(e) => setChannelConfigData({...channelConfigData, identifier: e.target.value})}
            />
            <p className="text-sm text-muted-foreground">
              Número configurado na sua conta Twilio.
            </p>
          </div>
          
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="twilio-sid">Twilio Account SID</Label>
              <Input 
                id="twilio-sid" 
                type="password" 
                placeholder="ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" 
                value={channelConfigData.apiKey}
                onChange={(e) => setChannelConfigData({...channelConfigData, apiKey: e.target.value})}
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="twilio-token">Twilio Auth Token</Label>
              <Input 
                id="twilio-token" 
                type="password" 
                placeholder="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" 
                value={channelConfigData.clientToken}
                onChange={(e) => setChannelConfigData({...channelConfigData, clientToken: e.target.value})}
              />
            </div>
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="webhook-url-twilio">URL de Webhook (Copie para o painel Twilio)</Label>
            <div className="flex">
              <Input 
                id="webhook-url-twilio" 
                readOnly 
                value={channelConfigData.webhookUrl}
              />
              <Button 
                variant="outline" 
                className="ml-2"
                onClick={() => {
                  navigator.clipboard.writeText(channelConfigData.webhookUrl);
                  toast({
                    title: "URL copiada!",
                    description: "A URL de webhook foi copiada para a área de transferência."
                  });
                }}
              >
                Copiar
              </Button>
            </div>
            <p className="text-sm text-muted-foreground">
              Configure esta URL no painel da Twilio para o evento de 
              {selectedChannelType === "SMS" ? " mensagem recebida." : " chamada recebida."}
            </p>
          </div>
          
          <div className="flex justify-end mt-4">
            <Button 
              variant="outline"
              onClick={() => {
                toast({
                  title: "Testando conexão...",
                  description: "Verificando as credenciais Twilio..."
                });
                
                setTimeout(() => {
                  toast({
                    title: "Conexão bem sucedida!",
                    description: "As credenciais Twilio estão corretas."
                  });
                }, 1500);
              }}
            >
              Testar Conexão Twilio
            </Button>
          </div>
        </div>
      );
    } else if (selectedChannelType === "Instagram" || selectedChannelType === "Facebook") {
      return (
        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="channel-name-meta">Nome Personalizado do Canal</Label>
            <Input 
              id="channel-name-meta" 
              placeholder={`Ex: ${selectedChannelType} Oficial`}
              value={channelConfigData.name}
              onChange={(e) => setChannelConfigData({...channelConfigData, name: e.target.value})}
            />
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="meta-account">
              {selectedChannelType === "Instagram" ? "Conta do Instagram" : "Página do Facebook"}
            </Label>
            <Input 
              id="meta-account" 
              placeholder={selectedChannelType === "Instagram" ? "@suaempresa" : "Sua Empresa"}
              value={channelConfigData.identifier}
              onChange={(e) => setChannelConfigData({...channelConfigData, identifier: e.target.value})}
            />
          </div>
          
          <div className="space-y-2 mt-4">
            <Button className="w-full">
              Conectar com {selectedChannelType === "Instagram" ? "Instagram" : "Facebook"}
            </Button>
            <p className="text-sm text-muted-foreground text-center mt-2">
              Você será redirecionado para autorizar o acesso à sua
              {selectedChannelType === "Instagram" ? " conta do Instagram" : " página do Facebook"}.
            </p>
          </div>
          
          <div className="mt-4 border p-4 rounded-md">
            <h4 className="font-medium mb-2">Requisitos para conexão</h4>
            <ul className="space-y-1 text-sm text-muted-foreground list-disc pl-5">
              <li>Ter uma Página do Facebook associada</li>
              {selectedChannelType === "Instagram" && <li>Conta do Instagram deve ser Profissional</li>}
              <li>Ser administrador da Página/Conta</li>
              <li>App do Facebook para Desenvolvedores configurado</li>
            </ul>
          </div>
        </div>
      );
    }
    
    return (
      <div className="p-8 text-center text-muted-foreground">
        Selecione um tipo de canal e provedor para configurar.
      </div>
    );
  };

  // Renderiza o conteúdo baseado no passo atual
  const renderStepContent = () => {
    switch (currentStep) {
      case 1: // Seleção do tipo de canal
        return (
          <div className="grid grid-cols-2 sm:grid-cols-3 gap-4 py-4">
            <Card 
              className="cursor-pointer hover:border-primary transition-colors"
              onClick={() => handleSelectChannelType("WhatsApp")}
            >
              <CardContent className="flex flex-col items-center justify-center p-6">
                <MessageSquare className="h-10 w-10 text-green-600 mb-2" />
                <h3 className="font-medium">WhatsApp</h3>
              </CardContent>
            </Card>
            
            <Card 
              className="cursor-pointer hover:border-primary transition-colors"
              onClick={() => handleSelectChannelType("Instagram")}
            >
              <CardContent className="flex flex-col items-center justify-center p-6">
                <Instagram className="h-10 w-10 text-purple-600 mb-2" />
                <h3 className="font-medium">Instagram</h3>
              </CardContent>
            </Card>
            
            <Card 
              className="cursor-pointer hover:border-primary transition-colors"
              onClick={() => handleSelectChannelType("Facebook")}
            >
              <CardContent className="flex flex-col items-center justify-center p-6">
                <Facebook className="h-10 w-10 text-blue-600 mb-2" />
                <h3 className="font-medium">Facebook</h3>
              </CardContent>
            </Card>
            
            <Card 
              className="cursor-pointer hover:border-primary transition-colors"
              onClick={() => handleSelectChannelType("Email")}
            >
              <CardContent className="flex flex-col items-center justify-center p-6">
                <Mail className="h-10 w-10 text-blue-600 mb-2" />
                <h3 className="font-medium">Email</h3>
              </CardContent>
            </Card>
            
            <Card 
              className="cursor-pointer hover:border-primary transition-colors"
              onClick={() => handleSelectChannelType("SMS")}
            >
              <CardContent className="flex flex-col items-center justify-center p-6">
                <MessageSquareText className="h-10 w-10 text-yellow-600 mb-2" />
                <h3 className="font-medium">SMS</h3>
              </CardContent>
            </Card>
            
            <Card 
              className="cursor-pointer hover:border-primary transition-colors"
              onClick={() => handleSelectChannelType("Telefonia")}
            >
              <CardContent className="flex flex-col items-center justify-center p-6">
                <Phone className="h-10 w-10 text-red-600 mb-2" />
                <h3 className="font-medium">Telefonia</h3>
              </CardContent>
            </Card>
          </div>
        );
      
      case 2: // Seleção do provedor (apenas para WhatsApp)
        return (
          <div className="space-y-6 py-4">
            <h3 className="text-lg font-medium">Como você deseja conectar o WhatsApp?</h3>
            
            <RadioGroup 
              className="space-y-4"
              defaultValue={selectedProvider || ""}
              onValueChange={(value) => handleSelectProvider(value)}
            >
              <div className="flex items-start space-x-3 border rounded-lg p-4 hover:border-primary cursor-pointer">
                <RadioGroupItem value="api" id="api" className="mt-1" />
                <div>
                  <Label htmlFor="api" className="font-medium cursor-pointer">
                    API Oficial do WhatsApp Business 
                    <Badge className="ml-2 bg-green-100 text-green-800">Recomendado</Badge>
                  </Label>
                  <p className="text-sm text-muted-foreground mt-1">
                    Conecte-se usando um provedor oficial da API do WhatsApp Business como Gupshup, Twilio ou 360Dialog. Mais estável e em conformidade com os termos de uso do WhatsApp.
                  </p>
                </div>
              </div>
              
              <div className="flex items-start space-x-3 border rounded-lg p-4 hover:border-primary cursor-pointer">
                <RadioGroupItem value="zapi" id="zapi" className="mt-1" />
                <div>
                  <Label htmlFor="zapi" className="font-medium cursor-pointer">
                    Conexão via Z-API 
                    <Badge className="ml-2 bg-yellow-100 text-yellow-800">Requer celular conectado</Badge>
                  </Label>
                  <p className="text-sm text-muted-foreground mt-1">
                    Conecte-se usando Z-API, que permite integrar seu WhatsApp pessoal ou comercial via QR Code. Requer um celular dedicado com internet constante. Pode apresentar instabilidades se o celular ficar offline.
                  </p>
                </div>
              </div>
            </RadioGroup>
          </div>
        );
      
      case 3: // Formulário específico de configuração
        return (
          <div className="py-4">
            <h3 className="text-lg font-medium mb-4">
              Configurar {selectedChannelType}
              {selectedChannelType === "WhatsApp" && ` via ${selectedProvider === "api" ? "API Oficial" : "Z-API"}`}
            </h3>
            
            <Tabs 
              defaultValue="credentials" 
              className="w-full"
              value={channelFormTab}
              onValueChange={setChannelFormTab}
            >
              <TabsList className="mb-4">
                <TabsTrigger value="credentials">Credenciais</TabsTrigger>
                <TabsTrigger value="settings">Configurações</TabsTrigger>
              </TabsList>
              
              <TabsContent value="credentials" className="space-y-4">
                {renderChannelConfigForm()}
              </TabsContent>
              
              <TabsContent value="settings" className="space-y-4">
                <div className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="welcome-message">Mensagem de Saudação Automática (Opcional)</Label>
                    <Textarea 
                      id="welcome-message" 
                      placeholder="Ex: Olá! Bem-vindo ao atendimento da Empresa XYZ. Como podemos ajudar hoje?"
                      className="min-h-[100px]"
                    />
                    <p className="text-sm text-muted-foreground">
                      Esta mensagem será enviada automaticamente quando um novo contato iniciar uma conversa.
                    </p>
                  </div>
                  
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <Label htmlFor="business-hours">Horário de Funcionamento</Label>
                      <div className="flex items-center">
                        <Label htmlFor="business-hours-toggle" className="mr-2 text-sm">Habilitar</Label>
                        <input type="checkbox" id="business-hours-toggle" className="sr-only" />
                        <div className="relative inline-flex h-5 w-10 cursor-pointer rounded-full bg-muted transition-colors">
                          <span className="absolute inset-0 m-1 h-3 w-3 rounded-full bg-background transition-colors" />
                        </div>
                      </div>
                    </div>
                    
                    <div className="border rounded-md p-4 bg-muted/20">
                      <p className="text-sm text-muted-foreground">
                        Configure os dias e horários de funcionamento deste canal. Fora desses horários, uma mensagem automática pode ser enviada.
                      </p>
                      <Button variant="outline" size="sm" className="mt-2" disabled>
                        Configurar Horários
                      </Button>
                      <Badge variant="outline" className="ml-2">Em breve</Badge>
                    </div>
                  </div>
                  
                  <div className="pt-4">
                    <div className="flex items-center space-x-2">
                      <input type="checkbox" id="active-channel" defaultChecked className="h-4 w-4 rounded border-gray-300" />
                      <Label htmlFor="active-channel">Ativar este canal imediatamente após salvar</Label>
                    </div>
                  </div>
                </div>
              </TabsContent>
            </Tabs>
          </div>
        );
      
      case 4: // Revisão e confirmação
        return (
          <div className="py-4 space-y-6">
            <h3 className="text-lg font-medium mb-2">Revise e Confirme as Configurações</h3>
            
            <Card>
              <CardContent className="p-4">
                <dl className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div>
                    <dt className="text-sm font-medium text-muted-foreground">Tipo de Canal</dt>
                    <dd className="mt-1">{selectedChannelType}</dd>
                  </div>
                  
                  {selectedChannelType === "WhatsApp" && (
                    <div>
                      <dt className="text-sm font-medium text-muted-foreground">Método de Conexão</dt>
                      <dd className="mt-1">{selectedProvider === "api" ? "API Oficial" : "Z-API"}</dd>
                    </div>
                  )}
                  
                  <div>
                    <dt className="text-sm font-medium text-muted-foreground">Nome do Canal</dt>
                    <dd className="mt-1">{channelConfigData.name || "-"}</dd>
                  </div>
                  
                  <div>
                    <dt className="text-sm font-medium text-muted-foreground">
                      {selectedChannelType === "WhatsApp" || selectedChannelType === "SMS" || selectedChannelType === "Telefonia" 
                        ? "Número"
                        : selectedChannelType === "Email" 
                          ? "Endereço de Email" 
                          : "Identificador"}
                    </dt>
                    <dd className="mt-1">{channelConfigData.identifier || "-"}</dd>
                  </div>
                  
                  <div className="sm:col-span-2">
                    <dt className="text-sm font-medium text-muted-foreground">Status</dt>
                    <dd className="mt-1">
                      <Badge className="bg-green-100 text-green-800">
                        Pronto para ativar
                      </Badge>
                    </dd>
                  </div>
                </dl>
              </CardContent>
            </Card>
            
            <div className="border rounded-md p-4 bg-yellow-50 text-yellow-800">
              <h4 className="font-medium flex items-center">
                <Bell className="h-4 w-4 mr-2" />
                Lembrete Importante
              </h4>
              <p className="text-sm mt-1">
                Certifique-se de configurar o webhook na plataforma {selectedChannelType === "WhatsApp" && selectedProvider === "api" 
                  ? "da API oficial do WhatsApp" 
                  : selectedChannelType === "WhatsApp" && selectedProvider === "zapi"
                    ? "da Z-API"
                    : selectedChannelType === "Instagram" || selectedChannelType === "Facebook"
                      ? "da Meta/Facebook"
                      : selectedChannelType === "SMS" || selectedChannelType === "Telefonia"
                        ? "da Twilio"
                        : "do provedor de email"
                } para começar a receber mensagens.
              </p>
            </div>
          </div>
        );
      
      default:
        return null;
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Canais de Comunicação</CardTitle>
        <CardDescription>
          Configure os canais de comunicação com seus clientes
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex justify-end mb-4">
          <Button onClick={() => setOpenAddChannelDialog(true)}>+ Adicionar Novo Canal</Button>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <Card className="bg-muted/50">
            <CardContent className="p-4">
              <div className="flex items-center gap-2 mb-2">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-green-600"><path d="M3 21l1.9-5.7a8.5 8.5 0 1 1 3.8 3.8z"></path></svg>
                <h3 className="font-medium">WhatsApp</h3>
              </div>
              <p className="text-sm text-muted-foreground">2 ativos, 1 configuração pendente</p>
            </CardContent>
          </Card>
          
          <Card className="bg-muted/50">
            <CardContent className="p-4">
              <div className="flex items-center gap-2 mb-2">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-purple-600"><rect width="20" height="20" x="2" y="2" rx="5" ry="5"></rect><path d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"></path><line x1="17.5" x2="17.51" y1="6.5" y2="6.5"></line></svg>
                <h3 className="font-medium">Instagram Direct</h3>
              </div>
              <p className="text-sm text-muted-foreground">1 ativo, 0 pendentes</p>
            </CardContent>
          </Card>
          
          <Card className="bg-muted/50">
            <CardContent className="p-4">
              <div className="flex items-center gap-2 mb-2">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-blue-600"><rect width="20" height="16" x="2" y="4" rx="2"></rect><path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"></path></svg>
                <h3 className="font-medium">Email</h3>
              </div>
              <p className="text-sm text-muted-foreground">2 ativos, 0 pendentes</p>
            </CardContent>
          </Card>
        </div>
        
        <div className="space-y-4">
          {/* WhatsApp via Z-API */}
          <Card className="border-l-4 border-l-green-500">
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="h-10 w-10 bg-green-100 rounded-full flex items-center justify-center">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-green-600"><path d="M3 21l1.9-5.7a8.5 8.5 0 1 1 3.8 3.8z"></path></svg>
                  </div>
                  <div>
                    <h3 className="font-semibold">WhatsApp Principal - Z-API</h3>
                    <p className="text-sm text-muted-foreground">+55 11 98765-4321</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <span className="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full">Conectado</span>
                  <Button variant="outline" size="sm">Verificar Status</Button>
                  <Button 
                    variant="ghost" 
                    size="sm"
                    onClick={() => {
                      setChannelConfigData({
                        ...channelConfigData,
                        name: "WhatsApp Principal - Z-API",
                        identifier: "+55 11 98765-4321"
                      });
                      setSelectedChannelType("WhatsApp");
                      setSelectedProvider("zapi");
                      setCurrentStep(3);
                      setOpenChannelConfigDialog(true);
                    }}
                  >
                    Editar
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
          
          {/* Instagram */}
          <Card className="border-l-4 border-l-orange-500">
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="h-10 w-10 bg-purple-100 rounded-full flex items-center justify-center">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-purple-600"><rect width="20" height="20" x="2" y="2" rx="5" ry="5"></rect><path d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"></path><line x1="17.5" x2="17.51" y1="6.5" y2="6.5"></line></svg>
                  </div>
                  <div>
                    <h3 className="font-semibold">Instagram Direct</h3>
                    <p className="text-sm text-muted-foreground">@minhaempresa</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <span className="bg-orange-100 text-orange-800 text-xs font-medium px-2.5 py-0.5 rounded-full">Configuração Pendente</span>
                  <Button variant="outline" size="sm">Conectar</Button>
                  <Button variant="ghost" size="sm">Remover</Button>
                </div>
              </div>
            </CardContent>
          </Card>
          
          {/* Email */}
          <Card className="border-l-4 border-l-blue-500">
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="h-10 w-10 bg-blue-100 rounded-full flex items-center justify-center">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-blue-600"><rect width="20" height="16" x="2" y="4" rx="2"></rect><path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"></path></svg>
                  </div>
                  <div>
                    <h3 className="font-semibold">Email Corporativo</h3>
                    <p className="text-sm text-muted-foreground">suporte@minhaempresa.com</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <span className="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full">Conectado</span>
                  <Button variant="outline" size="sm">Verificar Status</Button>
                  <Button variant="ghost" size="sm">Editar</Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Diálogo para adicionar novo canal */}
        <Dialog open={openAddChannelDialog} onOpenChange={setOpenAddChannelDialog}>
          <DialogContent className="sm:max-w-md md:max-w-2xl">
            <DialogHeader>
              <DialogTitle>
                {currentStep === 1 ? "Adicionar Novo Canal" : 
                 currentStep === 2 ? `Selecionar Provedor de ${selectedChannelType}` : 
                 currentStep === 3 ? `Configurar ${selectedChannelType}` : 
                 "Revisar e Confirmar"}
              </DialogTitle>
              <DialogDescription>
                {currentStep === 1 ? "Selecione o tipo de canal que deseja adicionar" : 
                 currentStep === 2 ? "Escolha como deseja conectar este canal" : 
                 currentStep === 3 ? "Configure as credenciais e parâmetros necessários" : 
                 "Verifique se todas as informações estão corretas"}
              </DialogDescription>
            </DialogHeader>
            
            {/* Indicador de progresso */}
            <div className="flex items-center justify-between text-xs text-muted-foreground mb-4">
              <div className={`flex flex-col items-center ${currentStep >= 1 ? "text-primary" : ""}`}>
                <div className={`w-6 h-6 rounded-full ${currentStep >= 1 ? "bg-primary text-primary-foreground" : "bg-muted"} flex items-center justify-center mb-1`}>
                  1
                </div>
                <span>Tipo</span>
              </div>
              
              <div className={`w-full h-px bg-muted ${currentStep >= 2 ? "bg-primary" : ""} mx-2`} />
              
              <div className={`flex flex-col items-center ${currentStep >= 2 ? "text-primary" : ""}`}>
                <div className={`w-6 h-6 rounded-full ${currentStep >= 2 ? "bg-primary text-primary-foreground" : "bg-muted"} flex items-center justify-center mb-1`}>
                  {selectedChannelType === "WhatsApp" ? "2" : "→"}
                </div>
                <span>{selectedChannelType === "WhatsApp" ? "Provedor" : ""}</span>
              </div>
              
              <div className={`w-full h-px bg-muted ${currentStep >= 3 ? "bg-primary" : ""} mx-2`} />
              
              <div className={`flex flex-col items-center ${currentStep >= 3 ? "text-primary" : ""}`}>
                <div className={`w-6 h-6 rounded-full ${currentStep >= 3 ? "bg-primary text-primary-foreground" : "bg-muted"} flex items-center justify-center mb-1`}>
                  {selectedChannelType === "WhatsApp" ? "3" : "2"}
                </div>
                <span>Config</span>
              </div>
              
              <div className={`w-full h-px bg-muted ${currentStep >= 4 ? "bg-primary" : ""} mx-2`} />
              
              <div className={`flex flex-col items-center ${currentStep >= 4 ? "text-primary" : ""}`}>
                <div className={`w-6 h-6 rounded-full ${currentStep >= 4 ? "bg-primary text-primary-foreground" : "bg-muted"} flex items-center justify-center mb-1`}>
                  {selectedChannelType === "WhatsApp" ? "4" : "3"}
                </div>
                <span>Revisar</span>
              </div>
            </div>
            
            {renderStepContent()}
            
            <DialogFooter className="flex justify-between mt-6">
              {currentStep > 1 && (
                <Button 
                  type="button" 
                  variant="outline"
                  onClick={handleBackStep}
                >
                  Voltar
                </Button>
              )}
              
              <div>
                <Button
                  type="button"
                  variant="secondary"
                  onClick={() => {
                    setOpenAddChannelDialog(false);
                    setCurrentStep(1);
                    setSelectedChannelType(null);
                    setSelectedProvider(null);
                  }}
                  className="mr-2"
                >
                  Cancelar
                </Button>
                
                {currentStep === 3 && (
                  <Button
                    type="button"
                    onClick={handleCredentialsSubmit}
                  >
                    Avançar
                  </Button>
                )}
                
                {currentStep === 4 && (
                  <Button
                    type="button"
                    onClick={handleSaveChannel}
                  >
                    Ativar Canal
                  </Button>
                )}
              </div>
            </DialogFooter>
          </DialogContent>
        </Dialog>
        
        {/* Diálogo para editar canal existente */}
        <Dialog open={openChannelConfigDialog} onOpenChange={setOpenChannelConfigDialog}>
          <DialogContent className="sm:max-w-md md:max-w-2xl">
            <DialogHeader>
              <DialogTitle>Editar Canal</DialogTitle>
              <DialogDescription>
                Altere as configurações do canal selecionado
              </DialogDescription>
            </DialogHeader>
            
            <Tabs defaultValue="credentials" className="w-full">
              <TabsList className="mb-4">
                <TabsTrigger value="credentials">Credenciais</TabsTrigger>
                <TabsTrigger value="settings">Configurações</TabsTrigger>
                <TabsTrigger value="status">Status</TabsTrigger>
              </TabsList>
              
              <TabsContent value="credentials" className="space-y-4">
                {renderChannelConfigForm()}
              </TabsContent>
              
              <TabsContent value="settings" className="space-y-4">
                <div className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="edit-welcome-message">Mensagem de Saudação Automática</Label>
                    <Textarea 
                      id="edit-welcome-message" 
                      placeholder="Ex: Olá! Bem-vindo ao atendimento da Empresa XYZ. Como podemos ajudar hoje?"
                      className="min-h-[100px]"
                      defaultValue="Olá! Bem-vindo ao atendimento da nossa empresa. Como posso ajudar?"
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <Label htmlFor="edit-business-hours">Horário de Funcionamento</Label>
                      <div className="flex items-center">
                        <Label htmlFor="edit-business-hours-toggle" className="mr-2 text-sm">Habilitar</Label>
                        <input type="checkbox" id="edit-business-hours-toggle" className="sr-only" defaultChecked />
                        <div className="relative inline-flex h-5 w-10 cursor-pointer rounded-full bg-primary transition-colors">
                          <span className="absolute inset-0 m-1 h-3 w-3 rounded-full bg-background transition-colors translate-x-5" />
                        </div>
                      </div>
                    </div>
                    
                    <div className="border rounded-md p-4">
                      <div className="space-y-2">
                        <p className="text-sm">Segunda a Sexta: 09:00 - 18:00</p>
                        <p className="text-sm">Sábado: 09:00 - 13:00</p>
                        <p className="text-sm">Domingo: Fechado</p>
                      </div>
                      <Button variant="outline" size="sm" className="mt-2">
                        Alterar Horários
                      </Button>
                    </div>
                  </div>
                  
                  <div className="pt-4">
                    <div className="flex items-center justify-between">
                      <Label htmlFor="edit-active-channel">Canal Ativo</Label>
                      <div className="flex items-center">
                        <input type="checkbox" id="edit-active-channel" className="sr-only" defaultChecked />
                        <div className="relative inline-flex h-5 w-10 cursor-pointer rounded-full bg-primary transition-colors">
                          <span className="absolute inset-0 m-1 h-3 w-3 rounded-full bg-background transition-colors translate-x-5" />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </TabsContent>
              
              <TabsContent value="status" className="space-y-4">
                <div className="space-y-4">
                  <div className="bg-green-50 text-green-800 p-4 rounded-md flex items-start">
                    <Check className="h-5 w-5 mr-2 mt-0.5 flex-shrink-0" />
                    <div>
                      <h4 className="font-medium">Canal Operacional</h4>
                      <p className="text-sm mt-1">
                        O canal está conectado e funcionando normalmente. Última verificação: hoje às 15:30.
                      </p>
                    </div>
                  </div>
                  
                  <Card>
                    <CardContent className="p-4">
                      <h4 className="font-medium mb-4">Estatísticas do Canal</h4>
                      <dl className="grid grid-cols-2 gap-4">
                        <div>
                          <dt className="text-sm text-muted-foreground">Mensagens Recebidas (hoje)</dt>
                          <dd className="text-2xl font-semibold">43</dd>
                        </div>
                        <div>
                          <dt className="text-sm text-muted-foreground">Mensagens Enviadas (hoje)</dt>
                          <dd className="text-2xl font-semibold">78</dd>
                        </div>
                        <div>
                          <dt className="text-sm text-muted-foreground">Tempo Médio de Resposta</dt>
                          <dd className="text-2xl font-semibold">5m</dd>
                        </div>
                        <div>
                          <dt className="text-sm text-muted-foreground">Contatos Ativos</dt>
                          <dd className="text-2xl font-semibold">127</dd>
                        </div>
                      </dl>
                    </CardContent>
                  </Card>
                  
                  <div className="space-y-2">
                    <h4 className="font-medium">Ações de Manutenção</h4>
                    <div className="grid grid-cols-2 gap-2">
                      <Button variant="outline" className="w-full">
                        <RefreshCw className="h-4 w-4 mr-2" />
                        Verificar Status
                      </Button>
                      <Button variant="outline" className="w-full">
                        <Settings className="h-4 w-4 mr-2" />
                        Reconfigurar Webhook
                      </Button>
                    </div>
                  </div>
                  
                  <div className="pt-4 border-t">
                    <Button variant="destructive" className="w-full">
                      <Trash2 className="h-4 w-4 mr-2" />
                      Remover Canal
                    </Button>
                  </div>
                </div>
              </TabsContent>
            </Tabs>
            
            <DialogFooter className="space-x-2">
              <Button
                type="button"
                variant="secondary"
                onClick={() => setOpenChannelConfigDialog(false)}
              >
                Cancelar
              </Button>
              <Button
                type="button"
                onClick={() => {
                  toast({
                    title: "Alterações salvas",
                    description: "As configurações do canal foram atualizadas com sucesso."
                  });
                  setOpenChannelConfigDialog(false);
                }}
              >
                Salvar Alterações
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </CardContent>
    </Card>
  );
};