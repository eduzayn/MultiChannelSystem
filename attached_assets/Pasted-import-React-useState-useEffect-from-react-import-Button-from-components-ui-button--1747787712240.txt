import React, { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Search, Plus, Filter, X, ChevronDown } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Checkbox } from "@/components/ui/checkbox";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import ContactDetail from "@/modules/Contacts/components/ContactDetail";
import { ContactForm } from "@/modules/Contacts/components/ContactForm";
import { useNavigate, useSearchParams } from "react-router-dom";

// Dados de exemplo para os contatos
const MOCK_CONTACTS = [
  { 
    id: 1, 
    name: "Maria Santos", 
    email: "maria.santos@email.com", 
    phone: "+55 11 91234-5678", 
    type: "Cliente",
    company: "ABC Tecnologia",
    lastActivity: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),
    createdAt: new Date(2023, 5, 15),
    tags: ["VIP", "Suporte Premium"],
    owner: "João da Silva"
  },
  { 
    id: 2, 
    name: "João Pereira", 
    email: "joao.pereira@email.com", 
    phone: "+55 11 98765-4321", 
    type: "Lead",
    company: "XYZ Marketing",
    lastActivity: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),
    createdAt: new Date(2023, 8, 22),
    tags: ["Novo", "Prospecto"],
    owner: "Ana Oliveira"
  },
  { 
    id: 3, 
    name: "Ana Oliveira", 
    email: "ana.oliveira@email.com", 
    phone: "+55 11 99876-5432", 
    type: "Cliente",
    company: "LMN Consultoria",
    lastActivity: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),
    createdAt: new Date(2022, 11, 10),
    tags: ["VIP", "Parceiro"],
    owner: "Carlos Gomes"
  },
  { 
    id: 4, 
    name: "Carlos Silva", 
    email: "carlos.silva@email.com", 
    phone: "+55 11 95432-1098", 
    type: "Cliente",
    company: "PQR Soluções",
    lastActivity: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000),
    createdAt: new Date(2023, 2, 5),
    tags: ["Ativo"],
    owner: "João da Silva"
  },
  { 
    id: 5, 
    name: "Beatriz Lima", 
    email: "beatriz.lima@email.com", 
    phone: "+55 11 93210-9876", 
    type: "Lead",
    company: "STU Sistemas",
    lastActivity: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000),
    createdAt: new Date(2023, 9, 30),
    tags: ["Potencial", "E-commerce"],
    owner: "Ana Oliveira"
  },
];

const ContactsPage = () => {
  const [searchParams, setSearchParams] = useSearchParams();
  const navigate = useNavigate();
  
  // Estado para o termo de busca
  const [searchQuery, setSearchQuery] = useState("");
  
  // Estado para os filtros
  const [activeFilters, setActiveFilters] = useState({
    type: [] as string[],
    tags: [] as string[],
    owner: [] as string[]
  });
  
  // Estado para controlar a seleção de contatos para ações em massa
  const [selectedContacts, setSelectedContacts] = useState<number[]>([]);
  
  // Estado para controlar a exibição do modal de detalhes do contato
  const [contactDetailOpen, setContactDetailOpen] = useState(false);
  
  // Estado para controlar a exibição do modal de criação/edição de contato
  const [contactFormOpen, setContactFormOpen] = useState(false);
  const [editingContact, setEditingContact] = useState<any>(null);
  
  // Estado para controlar a exibição do popover de filtros
  const [filtersOpen, setFiltersOpen] = useState(false);

  // Obtém o ID do contato da URL, se existir
  const contactId = searchParams.get("id") ? Number(searchParams.get("id")) : null;
  const selectedContact = MOCK_CONTACTS.find(contact => contact.id === contactId);
  
  // Filtrar contatos com base na busca e nos filtros ativos
  const filteredContacts = MOCK_CONTACTS.filter(contact => {
    // Filtro da busca
    const matchesSearch = 
      contact.name.toLowerCase().includes(searchQuery.toLowerCase()) || 
      contact.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
      contact.phone.includes(searchQuery) ||
      contact.company.toLowerCase().includes(searchQuery.toLowerCase());
    
    // Filtros de tipo
    const matchesType = activeFilters.type.length === 0 || 
      activeFilters.type.includes(contact.type);
    
    // Filtros de tags
    const matchesTags = activeFilters.tags.length === 0 || 
      contact.tags.some(tag => activeFilters.tags.includes(tag));
    
    // Filtros de proprietário
    const matchesOwner = activeFilters.owner.length === 0 || 
      activeFilters.owner.includes(contact.owner);
    
    return matchesSearch && matchesType && matchesTags && matchesOwner;
  });

  // Toggle de seleção para todos os contatos (checkbox do cabeçalho)
  const toggleSelectAll = () => {
    if (selectedContacts.length === filteredContacts.length) {
      setSelectedContacts([]);
    } else {
      setSelectedContacts(filteredContacts.map(contact => contact.id));
    }
  };

  // Toggle de seleção para um contato específico
  const toggleSelectContact = (id: number) => {
    if (selectedContacts.includes(id)) {
      setSelectedContacts(selectedContacts.filter(contactId => contactId !== id));
    } else {
      setSelectedContacts([...selectedContacts, id]);
    }
  };

  // Formata a data de última atividade para exibição
  const formatLastActivity = (date: Date) => {
    const now = new Date();
    const diffTime = Math.abs(now.getTime() - date.getTime());
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays === 0) return "Hoje";
    if (diffDays === 1) return "Ontem";
    if (diffDays < 7) return `${diffDays} dias atrás`;
    
    return date.toLocaleDateString('pt-BR');
  };
  
  // Abre o modal de detalhes do contato
  const openContactDetail = (id: number) => {
    navigate(`/contacts?id=${id}`);
    setContactDetailOpen(true);
  };
  
  // Abre o modal de edição de contato
  const openEditContact = (contact: any) => {
    setEditingContact(contact);
    setContactFormOpen(true);
  };
  
  // Fecha o modal de detalhes e limpa o parâmetro da URL
  const handleCloseContactDetail = () => {
    setContactDetailOpen(false);
    navigate("/contacts");
  };
  
  // Fecha o modal de criação/edição de contato
  const handleCloseContactForm = () => {
    setContactFormOpen(false);
    setEditingContact(null);
  };
  
  // Lidar com a aplicação de filtros
  const handleApplyFilter = (filterType: string, value: string) => {
    setActiveFilters(prev => {
      const currentValues = prev[filterType as keyof typeof prev] as string[];
      
      if (currentValues.includes(value)) {
        // Remove o filtro se já estiver aplicado
        return {
          ...prev,
          [filterType]: currentValues.filter(v => v !== value)
        };
      } else {
        // Adiciona o filtro se não estiver aplicado
        return {
          ...prev,
          [filterType]: [...currentValues, value]
        };
      }
    });
  };
  
  // Reset de todos os filtros
  const resetFilters = () => {
    setActiveFilters({
      type: [],
      tags: [],
      owner: []
    });
    setFiltersOpen(false);
  };
  
  // Contagem de filtros ativos
  const activeFiltersCount = 
    activeFilters.type.length + 
    activeFilters.tags.length + 
    activeFilters.owner.length;

  // Extrair todas as tags e proprietários únicos da lista de contatos para os filtros
  const allTags = Array.from(new Set(MOCK_CONTACTS.flatMap(contact => contact.tags)));
  const allOwners = Array.from(new Set(MOCK_CONTACTS.map(contact => contact.owner)));
  
  // Verificar se o contato id da URL existe e abrir modal automaticamente
  useEffect(() => {
    if (contactId && selectedContact) {
      setContactDetailOpen(true);
    }
  }, [contactId, selectedContact]);
  
  // Exibir/esconder dialogs com base nas ações da URL
  useEffect(() => {
    const action = searchParams.get("action");
    if (action === "new") {
      setContactFormOpen(true);
      setEditingContact(null);
    }
  }, [searchParams]);

  return (
    <div className="p-6">
      {/* Cabeçalho da página */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6">
        <h1 className="text-3xl font-bold">Contatos</h1>
        
        <div className="flex flex-col sm:flex-row gap-3">
          {/* Busca */}
          <div className="relative">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input 
              placeholder="Buscar contatos..." 
              className="pl-9 w-full sm:w-[250px]" 
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
          
          {/* Filtros */}
          <Popover open={filtersOpen} onOpenChange={setFiltersOpen}>
            <PopoverTrigger asChild>
              <Button variant="outline" className="flex items-center gap-1">
                <Filter className="h-4 w-4 mr-1" />
                Filtros
                {activeFiltersCount > 0 && (
                  <Badge className="ml-1 h-5 w-5 p-0 flex items-center justify-center">
                    {activeFiltersCount}
                  </Badge>
                )}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-80">
              <div className="flex justify-between items-center mb-3">
                <h3 className="font-medium">Filtros</h3>
                <Button variant="ghost" size="sm" onClick={resetFilters} className="h-7 text-xs">
                  Limpar filtros
                </Button>
              </div>
              
              <Tabs defaultValue="type">
                <TabsList className="w-full mb-3">
                  <TabsTrigger value="type" className="flex-1">Tipo</TabsTrigger>
                  <TabsTrigger value="tags" className="flex-1">Tags</TabsTrigger>
                  <TabsTrigger value="owner" className="flex-1">Proprietário</TabsTrigger>
                </TabsList>
                
                <TabsContent value="type" className="mt-0">
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <Checkbox 
                        id="filter-type-cliente" 
                        checked={activeFilters.type.includes("Cliente")}
                        onCheckedChange={() => handleApplyFilter("type", "Cliente")}
                      />
                      <label htmlFor="filter-type-cliente" className="text-sm">Cliente</label>
                    </div>
                    <div className="flex items-center gap-2">
                      <Checkbox 
                        id="filter-type-lead" 
                        checked={activeFilters.type.includes("Lead")}
                        onCheckedChange={() => handleApplyFilter("type", "Lead")}
                      />
                      <label htmlFor="filter-type-lead" className="text-sm">Lead</label>
                    </div>
                  </div>
                </TabsContent>
                
                <TabsContent value="tags" className="mt-0">
                  <div className="space-y-2 max-h-48 overflow-y-auto">
                    {allTags.map(tag => (
                      <div key={tag} className="flex items-center gap-2">
                        <Checkbox 
                          id={`filter-tag-${tag}`} 
                          checked={activeFilters.tags.includes(tag)}
                          onCheckedChange={() => handleApplyFilter("tags", tag)}
                        />
                        <label htmlFor={`filter-tag-${tag}`} className="text-sm">{tag}</label>
                      </div>
                    ))}
                  </div>
                </TabsContent>
                
                <TabsContent value="owner" className="mt-0">
                  <div className="space-y-2">
                    {allOwners.map(owner => (
                      <div key={owner} className="flex items-center gap-2">
                        <Checkbox 
                          id={`filter-owner-${owner}`} 
                          checked={activeFilters.owner.includes(owner)}
                          onCheckedChange={() => handleApplyFilter("owner", owner)}
                        />
                        <label htmlFor={`filter-owner-${owner}`} className="text-sm">{owner}</label>
                      </div>
                    ))}
                  </div>
                </TabsContent>
              </Tabs>
              
              <div className="flex justify-between mt-4">
                <Button variant="ghost" size="sm" onClick={() => setFiltersOpen(false)}>Cancelar</Button>
                <Button size="sm" onClick={() => setFiltersOpen(false)}>Aplicar Filtros</Button>
              </div>
            </PopoverContent>
          </Popover>
          
          {/* Novo Contato */}
          <Button onClick={() => { setEditingContact(null); setContactFormOpen(true); }}>
            <Plus className="h-4 w-4 mr-2" />
            Novo Contato
          </Button>
        </div>
      </div>

      {/* Filtros ativos */}
      {activeFiltersCount > 0 && (
        <div className="flex flex-wrap gap-2 mb-4">
          {activeFilters.type.map(type => (
            <Badge key={`type-${type}`} variant="secondary" className="pl-2 flex items-center gap-1">
              Tipo: {type}
              <Button 
                variant="ghost" 
                size="icon" 
                className="h-4 w-4 ml-1 p-0" 
                onClick={() => handleApplyFilter("type", type)}
              >
                <X className="h-3 w-3" />
              </Button>
            </Badge>
          ))}
          {activeFilters.tags.map(tag => (
            <Badge key={`tag-${tag}`} variant="secondary" className="pl-2 flex items-center gap-1">
              Tag: {tag}
              <Button 
                variant="ghost" 
                size="icon" 
                className="h-4 w-4 ml-1 p-0" 
                onClick={() => handleApplyFilter("tags", tag)}
              >
                <X className="h-3 w-3" />
              </Button>
            </Badge>
          ))}
          {activeFilters.owner.map(owner => (
            <Badge key={`owner-${owner}`} variant="secondary" className="pl-2 flex items-center gap-1">
              Proprietário: {owner}
              <Button 
                variant="ghost" 
                size="icon" 
                className="h-4 w-4 ml-1 p-0" 
                onClick={() => handleApplyFilter("owner", owner)}
              >
                <X className="h-3 w-3" />
              </Button>
            </Badge>
          ))}
          <Button variant="ghost" size="sm" className="text-xs h-6" onClick={resetFilters}>
            Limpar filtros
          </Button>
        </div>
      )}

      {/* Ações em massa (quando contatos estão selecionados) */}
      {selectedContacts.length > 0 && (
        <div className="bg-muted p-3 rounded-lg mb-4 flex justify-between items-center">
          <span className="text-sm font-medium">
            {selectedContacts.length} contato{selectedContacts.length > 1 ? 's' : ''} selecionado{selectedContacts.length > 1 ? 's' : ''}
          </span>
          <div className="flex gap-2">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" size="sm">
                  Ações <ChevronDown className="ml-1 h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuLabel>Ações em massa</DropdownMenuLabel>
                <DropdownMenuSeparator />
                <DropdownMenuItem>Adicionar tags</DropdownMenuItem>
                <DropdownMenuItem>Remover tags</DropdownMenuItem>
                <DropdownMenuItem>Atribuir proprietário</DropdownMenuItem>
                <DropdownMenuItem>Exportar contatos</DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem className="text-destructive">Excluir contatos</DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
            <Button variant="ghost" size="sm" onClick={() => setSelectedContacts([])}>
              Cancelar
            </Button>
          </div>
        </div>
      )}

      {/* Tabela de contatos */}
      <div className="bg-card rounded-lg border shadow-sm overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="bg-muted/50">
                <th className="p-4 font-medium text-left">
                  <div className="flex items-center">
                    <Checkbox 
                      id="select-all" 
                      checked={selectedContacts.length > 0 && selectedContacts.length === filteredContacts.length}
                      onCheckedChange={toggleSelectAll}
                      aria-label="Selecionar todos"
                    />
                  </div>
                </th>
                <th className="text-left p-4 font-medium">Nome</th>
                <th className="text-left p-4 font-medium">Email</th>
                <th className="text-left p-4 font-medium">Telefone</th>
                <th className="text-left p-4 font-medium">Empresa</th>
                <th className="text-left p-4 font-medium">Tipo</th>
                <th className="text-left p-4 font-medium">Última Atividade</th>
                <th className="text-left p-4 font-medium">Proprietário</th>
                <th className="text-left p-4 font-medium">Tags</th>
                <th className="p-4 font-medium text-right">Ações</th>
              </tr>
            </thead>
            <tbody>
              {filteredContacts.map((contact) => (
                <tr key={contact.id} className="border-t hover:bg-muted/20">
                  <td className="p-4">
                    <Checkbox 
                      checked={selectedContacts.includes(contact.id)}
                      onCheckedChange={() => toggleSelectContact(contact.id)}
                      aria-label={`Selecionar ${contact.name}`}
                    />
                  </td>
                  <td className="p-4">
                    <div className="flex items-center">
                      <div className="w-8 h-8 rounded-full bg-muted flex items-center justify-center mr-3">
                        <span className="font-medium">{contact.name.charAt(0)}</span>
                      </div>
                      <button 
                        onClick={() => openContactDetail(contact.id)}
                        className="text-left hover:underline hover:text-primary transition-colors"
                      >
                        {contact.name}
                      </button>
                    </div>
                  </td>
                  <td className="p-4">{contact.email}</td>
                  <td className="p-4">{contact.phone}</td>
                  <td className="p-4">{contact.company}</td>
                  <td className="p-4">
                    <span className={`px-2 py-1 rounded-full text-xs ${
                      contact.type === 'Cliente' 
                        ? 'bg-green-100 text-green-800' 
                        : 'bg-blue-100 text-blue-800'
                    }`}>
                      {contact.type}
                    </span>
                  </td>
                  <td className="p-4">
                    {formatLastActivity(contact.lastActivity)}
                  </td>
                  <td className="p-4">{contact.owner}</td>
                  <td className="p-4">
                    <div className="flex flex-wrap gap-1">
                      {contact.tags.map((tag, i) => (
                        <Badge key={i} variant="outline" className="text-xs">
                          {tag}
                        </Badge>
                      ))}
                    </div>
                  </td>
                  <td className="p-4 text-right">
                    <Button variant="ghost" size="sm" onClick={() => openContactDetail(contact.id)}>
                      Ver
                    </Button>
                    <Button variant="ghost" size="sm" onClick={() => openEditContact(contact)}>
                      Editar
                    </Button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
          
          {filteredContacts.length === 0 && (
            <div className="p-8 text-center text-muted-foreground">
              {searchQuery 
                ? `Nenhum contato encontrado para "${searchQuery}"` 
                : "Nenhum contato encontrado com os filtros aplicados"}
            </div>
          )}
        </div>
      </div>

      {/* Dialog de detalhes do contato */}
      <Dialog open={contactDetailOpen && !!selectedContact} onOpenChange={handleCloseContactDetail}>
        <DialogContent className="sm:max-w-[900px] p-0 h-[90vh]">
          <DialogHeader className="p-4 border-b">
            <DialogTitle>Detalhes do Contato</DialogTitle>
          </DialogHeader>
          {selectedContact && (
            <div className="flex h-full overflow-hidden">
              <div className="w-full h-full overflow-y-auto">
                <ContactDetail contact={selectedContact} onEdit={() => {
                  setContactDetailOpen(false);
                  openEditContact(selectedContact);
                }} />
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Dialog de criação/edição de contato */}
      <Dialog open={contactFormOpen} onOpenChange={handleCloseContactForm}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>{editingContact ? "Editar Contato" : "Novo Contato"}</DialogTitle>
          </DialogHeader>
          <ContactForm 
            contact={editingContact} 
            onSave={() => {
              setContactFormOpen(false);
              // Aqui seria implementada a lógica de salvar o contato
            }} 
            onCancel={handleCloseContactForm} 
          />
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default ContactsPage;