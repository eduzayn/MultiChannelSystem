import axios from 'axios';
import { Channel } from '@shared/schema';

/**
 * Serviço de integração com a Z-API (WhatsApp)
 * 
 * Implementa todas as funcionalidades da Z-API para envio e recebimento
 * de mensagens do WhatsApp.
 */

// Configuração global
// Configurações da instância web (valores das variáveis de ambiente ou valores padrão se não definidos)
const ZAPI_TOKEN = process.env.ZAPI_TOKEN || "A4E42029C248B72DA0842F47";
const ZAPI_INSTANCE_ID = process.env.ZAPI_INSTANCE_ID || "3DF871A7ADFB20FB49998E66062CE0C1";

// Usar CLIENT_TOKEN_ZAPI fornecido pelo usuário como primeira opção, depois cair para os outros
const ZAPI_CLIENT_TOKEN = process.env.CLIENT_TOKEN_ZAPI || 
                          process.env.ZAPI_CLIENT_TOKEN || 
                          "Fa427b12e188a433292a658fe45a07714S";

// Configurações alternativas da instância mobile para testes
const ZAPI_MOBILE_TOKEN = "8A82365003962876A3574828";
const ZAPI_MOBILE_INSTANCE_ID = "3D0C1D6E493402738F4C266504411D32";

const BASE_URL = 'https://api.z-api.io';

// Z-API Security Token (Token de Segurança da conta, diferente do token da instância)
// Este token é usado em todas as instâncias
const ZAPI_SECURITY_TOKEN = "Fa427b12e188a433292a658fe45a07714S";

/**
 * Função auxiliar para formatar botões no formato Z-API
 * @param buttons Array de botões no formato simples ({ text: string }) ou parcial ({ buttonText: string })
 * @param useActionButtons Flag para usar formato alternativo (não usado atualmente)
 * @returns Array de botões no formato oficial Z-API (com buttonId e buttonText.displayText)
 */
export function formatButtonsForZAPI(buttons: any[], useActionButtons = false) {
  return buttons.map((button, index) => {
    // Se já está no formato completo com buttonText como objeto, retorna como está
    if (button.buttonId && typeof button.buttonText === 'object' && button.buttonText.displayText) {
      return button;
    }
    
    // Se está no formato intermediário com buttonText como string
    if (typeof button.buttonText === 'string') {
      return {
        buttonId: button.buttonId || `btn_${index + 1}`,
        buttonText: {
          displayText: button.buttonText
        }
      };
    }
    
    // Formato antigo ou não especificado
    return {
      buttonId: button.buttonId || `btn_${index + 1}`,
      buttonText: {
        displayText: button.text || ""
      }
    };
  });
}

// Log inicial das configurações para diagnóstico
console.log("=================== CONFIGURAÇÃO Z-API ===================");
console.log(`ZAPI_INSTANCE_ID: ${ZAPI_INSTANCE_ID}`);
console.log(`ZAPI_TOKEN: ${ZAPI_TOKEN}`);
console.log(`Client-Token definido: ${ZAPI_CLIENT_TOKEN ? "SIM" : "NÃO"}`);
console.log(`Origem do Client-Token: ${
  process.env.CLIENT_TOKEN_ZAPI ? "CLIENT_TOKEN_ZAPI" : 
  (process.env.ZAPI_CLIENT_TOKEN ? "ZAPI_CLIENT_TOKEN" : "Valor padrão")
}`);
console.log("==========================================================");

// Função de ajuda para garantir que incluímos sempre o Client-Token nos headers
function getHeadersWithToken(token: string, clientToken: string = ZAPI_CLIENT_TOKEN) {
  // IMPORTANTE: De acordo com a documentação da Z-API e a coleção do Postman,
  // o formato correto do header é 'Client-Token' (com C e T maiúsculos)
  // https://www.postman.com/docs-z-api/z-api-s-public-workspace/folder/4aisbsg/messages
  const headers: Record<string, string> = {
    'Content-Type': 'application/json',
    'Client-Token': clientToken,
  };
  
  // Log para diagnóstico
  console.log(`[Z-API] Headers configurados:`, JSON.stringify(headers));
  
  return headers;
}

/**
 * Testa a conexão com as instâncias Z-API (web e mobile)
 * Esta função é útil para diagnóstico das credenciais da Z-API
 */
export async function testZapiInstances(): Promise<{
  webInstance: {
    success: boolean;
    message: string;
    data?: any;
  },
  mobileInstance: {
    success: boolean;
    message: string;
    data?: any;
  }
}> {
  const result = {
    webInstance: {
      success: false,
      message: "Não testado"
    },
    mobileInstance: {
      success: false,
      message: "Não testado"
    }
  };
  
  // Testar a instância web
  try {
    console.log(`Testando instância web Z-API (${ZAPI_INSTANCE_ID})...`);
    const webResponse = await axios.get(
      `${BASE_URL}/instances/${ZAPI_INSTANCE_ID}/token/${ZAPI_TOKEN}/status`,
      { headers: getHeadersWithToken(ZAPI_TOKEN) }
    );
    
    result.webInstance = {
      success: true,
      message: "Conexão bem-sucedida",
      data: webResponse.data
    };
  } catch (error) {
    console.error(`Erro ao testar instância web Z-API:`, error);
    if (axios.isAxiosError(error)) {
      result.webInstance = {
        success: false,
        message: `Erro ${error.response?.status}: ${error.response?.data?.error || error.message}`,
        data: error.response?.data
      };
    } else {
      result.webInstance = {
        success: false,
        message: error instanceof Error ? error.message : "Erro desconhecido"
      };
    }
  }
  
  // Testar a instância mobile
  try {
    console.log(`Testando instância mobile Z-API (${ZAPI_MOBILE_INSTANCE_ID})...`);
    const mobileResponse = await axios.get(
      `${BASE_URL}/instances/${ZAPI_MOBILE_INSTANCE_ID}/token/${ZAPI_MOBILE_TOKEN}/status`,
      { headers: getHeadersWithToken(ZAPI_MOBILE_TOKEN) }
    );
    
    result.mobileInstance = {
      success: true,
      message: "Conexão bem-sucedida",
      data: mobileResponse.data
    };
  } catch (error) {
    console.error(`Erro ao testar instância mobile Z-API:`, error);
    if (axios.isAxiosError(error)) {
      result.mobileInstance = {
        success: false,
        message: `Erro ${error.response?.status}: ${error.response?.data?.error || error.message}`,
        data: error.response?.data
      };
    } else {
      result.mobileInstance = {
        success: false,
        message: error instanceof Error ? error.message : "Erro desconhecido"
      };
    }
  }
  
  return result;
}

/**
 * Configura o canal Z-API
 * @param channel Canal configurado no sistema
 * @returns Status da configuração com QR Code se necessário
 */
export async function setupZAPIChannel(channel: Channel): Promise<{ status: string; message?: string; qrCode?: string }> {
  try {
    // Verifica se as credenciais estão disponíveis
    const instanceId = channel.config?.instanceId || ZAPI_INSTANCE_ID;
    const token