
import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Check, File, FileText, Link, MoreHorizontal, Plus, RefreshCw, Trash2, Upload } from "lucide-react";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { Checkbox } from "@/components/ui/checkbox";
import { cn } from "@/lib/utils";

// Mock data for knowledge sources
const mockSources = [
  { id: 1, name: "Manual do Produto X", type: "PDF", status: "indexed", added: "2025-04-15", lastSync: "2025-05-17", size: "24 chunks", tags: ["Produto", "Manual"] },
  { id: 2, name: "FAQ do Site Institucional", type: "URL", status: "indexed", added: "2025-03-20", lastSync: "2025-05-17", size: "45 chunks", tags: ["FAQ", "Website"] },
  { id: 3, name: "Blog da Empresa", type: "URL", status: "processing", added: "2025-05-18", lastSync: "-", size: "-", tags: ["Blog", "Artigos"] },
  { id: 4, name: "Perguntas Frequentes - Clientes", type: "FAQ", status: "indexed", added: "2025-02-10", lastSync: "2025-05-10", size: "18 chunks", tags: ["FAQ", "Suporte"] },
  { id: 5, name: "DocumentaÃ§Ã£o TÃ©cnica API", type: "PDF", status: "error", added: "2025-05-01", lastSync: "2025-05-01", size: "Erro", tags: ["TÃ©cnico", "API"] },
];

export const KnowledgeTab = () => {
  const [isAddSourceDialogOpen, setIsAddSourceDialogOpen] = useState(false);
  const [sourceType, setSourceType] = useState("url");
  const [currentStep, setCurrentStep] = useState(1);
  const [faqItems, setFaqItems] = useState([
    { id: 1, question: "", answer: "" },
    { id: 2, question: "", answer: "" },
  ]);

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "indexed":
        return <Badge variant="outline" className="bg-green-100 text-green-800 border-green-200">ðŸŸ¢ Indexado</Badge>;
      case "processing":
        return <Badge variant="outline" className="bg-yellow-100 text-yellow-800 border-yellow-200">ðŸŸ¡ Processando</Badge>;
      case "error":
        return <Badge variant="outline" className="bg-red-100 text-red-800 border-red-200">ðŸ”´ Erro</Badge>;
      case "scheduled":
        return <Badge variant="outline" className="bg-blue-100 text-blue-800 border-blue-200">ðŸ”µ Agendado</Badge>;
      default:
        return <Badge variant="outline">Status Desconhecido</Badge>;
    }
  };
  
  const handleAddFaqItem = () => {
    const newId = faqItems.length > 0 ? Math.max(...faqItems.map(item => item.id)) + 1 : 1;
    setFaqItems([...faqItems, { id: newId, question: "", answer: "" }]);
  };

  const renderAddSourceStep = () => {
    switch (currentStep) {
      case 1:
        return (
          <>
            <div className="space-y-4 py-4">
              <div className="space-y-2">
                <Label htmlFor="sourceName">Nome da Fonte</Label>
                <Input id="sourceName" placeholder="Ex: Manual do Produto, FAQ do Site, etc." />
              </div>
              
              <div className="space-y-2">
                <Label>Tipo de Fonte</Label>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                  <Button
                    variant="outline"
                    type="button"
                    className={cn(
                      "flex flex-col h-auto items-center justify-start p-4 gap-2",
                      sourceType === "url" && "border-primary"
                    )}
                    onClick={() => setSourceType("url")}
                  >
                    <Link className="h-8 w-8" />
                    <div className="text-sm font-medium">Link / URL</div>
                    <div className="text-xs text-muted-foreground">Website ou PÃ¡gina</div>
                  </Button>
                  
                  <Button
                    variant="outline"
                    type="button"
                    className={cn(
                      "flex flex-col h-auto items-center justify-start p-4 gap-2",
                      sourceType === "file" && "border-primary"
                    )}
                    onClick={() => setSourceType("file")}
                  >
                    <File className="h-8 w-8" />
                    <div className="text-sm font-medium">Arquivo</div>
                    <div className="text-xs text-muted-foreground">PDF, DOCX, TXT</div>
                  </Button>
                  
                  <Button
                    variant="outline"
                    type="button"
                    className={cn(
                      "flex flex-col h-auto items-center justify-start p-4 gap-2",
                      sourceType === "faq" && "border-primary"
                    )}
                    onClick={() => setSourceType("faq")}
                  >
                    <FileText className="h-8 w-8" />
                    <div className="text-sm font-medium">FAQ</div>
                    <div className="text-xs text-muted-foreground">Perguntas e Respostas</div>
                  </Button>
                  
                  <Button
                    variant="outline"
                    type="button"
                    className={cn(
                      "flex flex-col h-auto items-center justify-start p-4 gap-2",
                      sourceType === "manual" && "border-primary"
                    )}
                    onClick={() => setSourceType("manual")}
                  >
                    <FileText className="h-8 w-8" />
                    <div className="text-sm font-medium">Texto Manual</div>
                    <div className="text-xs text-muted-foreground">Escrever conteÃºdo</div>
                  </Button>
                </div>
              </div>
            </div>
            <DialogFooter className="flex justify-between">
              <Button variant="outline" onClick={() => setIsAddSourceDialogOpen(false)}>Cancelar</Button>
              <Button onClick={() => setCurrentStep(2)}>PrÃ³ximo</Button>
            </DialogFooter>
          </>
        );
        
      case 2:
        return (
          <>
            <div className="space-y-4 py-4">
              {sourceType === "url" && (
                <div className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="url">URL a ser Indexada</Label>
                    <Input id="url" placeholder="https://..." />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="crawlDepth">Profundidade de NavegaÃ§Ã£o</Label>
                    <Select defaultValue="1">
                      <SelectTrigger id="crawlDepth">
                        <SelectValue placeholder="Selecione a profundidade" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="0">Apenas esta pÃ¡gina</SelectItem>
                        <SelectItem value="1">Seguir links internos 1 nÃ­vel</SelectItem>
                        <SelectItem value="2">Seguir links internos 2 nÃ­veis</SelectItem>
                        <SelectItem value="sitemap">Usar Sitemap XML (se disponÃ­vel)</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="syncFrequency">FrequÃªncia de Re-sincronizaÃ§Ã£o</Label>
                    <Select defaultValue="never">
                      <SelectTrigger id="syncFrequency">
                        <SelectValue placeholder="Selecione a frequÃªncia" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="never">Nunca (Manual)</SelectItem>
                        <SelectItem value="daily">Diariamente</SelectItem>
                        <SelectItem value="weekly">Semanalmente</SelectItem>
                        <SelectItem value="monthly">Mensalmente</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              )}
              
              {sourceType === "file" && (
                <div className="space-y-4">
                  <div className="space-y-2">
                    <Label>Arquivos para Upload</Label>
                    <div className="border-2 border-dashed rounded-md p-6 text-center cursor-pointer hover:bg-muted/50 transition-colors">
                      <Upload className="mx-auto h-12 w-12 text-muted-foreground" />
                      <div className="mt-2">
                        <p className="text-sm font-medium">
                          Clique para selecionar ou arraste arquivos aqui
                        </p>
                        <p className="text-xs text-muted-foreground mt-1">
                          Formatos suportados: PDF, DOCX, TXT (MÃ¡x. 10MB)
                        </p>
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <Checkbox id="ocrEnabled" />
                    <Label htmlFor="ocrEnabled">Tentar extrair texto de imagens dentro dos PDFs (OCR)</Label>
                  </div>
                </div>
              )}
              
              {sourceType === "faq" && (
                <div className="space-y-4">
                  <div className="flex justify-between">
                    <Label>Perguntas e Respostas</Label>
                    <Button 
                      variant="outline" 
                      size="sm" 
                      className="text-xs"
                      onClick={handleAddFaqItem}
                    >
                      <Plus className="h-3 w-3 mr-1" /> Adicionar Item
                    </Button>
                  </div>
                  
                  <div className="border rounded-md">
                    {faqItems.map((item, index) => (
                      <div key={item.id} className="border-b p-4">
                        <Label htmlFor={`question${item.id}`} className="text-sm">Pergunta {index + 1}</Label>
                        <Input 
                          id={`question${item.id}`} 
                          className="mt-1" 
                          placeholder="Digite uma pergunta comum"
                          value={item.question}
                          onChange={(e) => {
                            const updatedItems = [...faqItems];
                            updatedItems[index].question = e.target.value;
                            setFaqItems(updatedItems);
                          }}  
                        />
                        <Label htmlFor={`answer${item.id}`} className="text-sm mt-2">Resposta {index + 1}</Label>
                        <Textarea 
                          id={`answer${item.id}`} 
                          className="mt-1" 
                          placeholder="Digite a resposta para essa pergunta"
                          value={item.answer}
                          onChange={(e) => {
                            const updatedItems = [...faqItems];
                            updatedItems[index].answer = e.target.value;
                            setFaqItems(updatedItems);
                          }}
                        />
                      </div>
                    ))}
                    
                    <div className="p-4 text-center">
                      <Button 
                        variant="outline" 
                        size="sm" 
                        className="text-xs"
                        onClick={handleAddFaqItem}
                      >
                        <Plus className="h-3 w-3 mr-1" /> Adicionar Mais
                      </Button>
                    </div>
                  </div>
                  
                  <div className="text-sm">
                    <span className="font-medium">Alternativa:</span>{" "}
                    <Button variant="link" className="text-sm p-0 h-auto">Fazer upload de arquivo CSV/Excel</Button>
                  </div>
                </div>
              )}
              
              {sourceType === "manual" && (
                <div className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="articleTitle">TÃ­tulo do ConteÃºdo</Label>
                    <Input id="articleTitle" placeholder="TÃ­tulo do artigo ou documento" />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="articleContent">ConteÃºdo</Label>
                    <Textarea 
                      id="articleContent" 
                      placeholder="Digite ou cole o conteÃºdo aqui..."
                      className="min-h-[200px]"
                    />
                  </div>
                </div>
              )}
            </div>
            <DialogFooter className="flex justify-between">
              <div className="flex gap-2">
                <Button variant="outline" onClick={() => setCurrentStep(1)}>Voltar</Button>
                <Button variant="outline" onClick={() => setIsAddSourceDialogOpen(false)}>Cancelar</Button>
              </div>
              <Button onClick={() => setCurrentStep(3)}>PrÃ³ximo</Button>
            </DialogFooter>
          </>
        );
        
      case 3:
        return (
          <>
            <div className="space-y-4 py-4">
              <div className="space-y-2">
                <Label htmlFor="contentLanguage">Idioma do ConteÃºdo</Label>
                <Select defaultValue="pt-BR">
                  <SelectTrigger id="contentLanguage">
                    <SelectValue placeholder="Selecione o idioma" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="pt-BR">PortuguÃªs (Brasil)</SelectItem>
                    <SelectItem value="en-US">InglÃªs (EUA)</SelectItem>
                    <SelectItem value="es">Espanhol</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="tags">Tags/Categorias</Label>
                <Input id="tags" placeholder="Produto, Manual, FAQ, Suporte (separadas por vÃ­rgula)" />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="audience">PÃºblico-Alvo Principal</Label>
                <Select defaultValue="customers">
                  <SelectTrigger id="audience">
                    <SelectValue placeholder="Selecione o pÃºblico" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="leads">Leads (ProspecÃ§Ã£o)</SelectItem>
                    <SelectItem value="customers">Clientes</SelectItem>
                    <SelectItem value="students">Alunos</SelectItem>
                    <SelectItem value="internal">Interno (Colaboradores)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="expirationDate">Data de Validade do ConteÃºdo (Opcional)</Label>
                <Input id="expirationDate" type="date" />
              </div>
            </div>
            <DialogFooter className="flex justify-between">
              <div className="flex gap-2">
                <Button variant="outline" onClick={() => setCurrentStep(2)}>Voltar</Button>
                <Button variant="outline" onClick={() => setIsAddSourceDialogOpen(false)}>Cancelar</Button>
              </div>
              <Button onClick={() => setIsAddSourceDialogOpen(false)}>
                <Plus className="mr-2 h-4 w-4" /> Adicionar e Iniciar IndexaÃ§Ã£o
              </Button>
            </DialogFooter>
          </>
        );
        
      default:
        return null;
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="space-y-1">
          <h2 className="text-2xl font-bold">Fontes de Conhecimento</h2>
          <p className="text-muted-foreground">
            Gerencie os dados e documentos que a IA Prof. Ana usarÃ¡ para gerar respostas
          </p>
        </div>
        
        <Dialog open={isAddSourceDialogOpen} onOpenChange={setIsAddSourceDialogOpen}>
          <DialogTrigger asChild>
            <Button onClick={() => setIsAddSourceDialogOpen(true)} className="flex items-center gap-2">
              <Plus className="h-4 w-4" /> Adicionar Nova Fonte
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[600px]">
            <DialogHeader>
              <DialogTitle>Adicionar Nova Fonte de Conhecimento</DialogTitle>
              <DialogDescription>
                {currentStep === 1 && "Selecione o tipo de conteÃºdo que vocÃª deseja adicionar Ã  base de conhecimento."}
                {currentStep === 2 && "Configure os detalhes especÃ­ficos para a fonte selecionada."}
                {currentStep === 3 && "Adicione metadados para melhorar a contextualizaÃ§Ã£o do conhecimento."}
              </DialogDescription>
            </DialogHeader>
            
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center">
                <Badge variant={currentStep >= 1 ? "default" : "outline"} className="rounded-full">1</Badge>
                <div className="h-px w-8 bg-primary mx-2"></div>
                <Badge variant={currentStep >= 2 ? "default" : "outline"} className="rounded-full">2</Badge>
                <div className="h-px w-8 bg-primary mx-2"></div>
                <Badge variant={currentStep >= 3 ? "default" : "outline"} className="rounded-full">3</Badge>
              </div>
              <div className="text-sm text-muted-foreground">
                Passo {currentStep} de 3
              </div>
            </div>
            
            {renderAddSourceStep()}
          </DialogContent>
        </Dialog>
      </div>

      <div className="flex items-center space-x-2 text-sm text-muted-foreground border-b">
        <div className="flex-1">
          <Badge variant="outline" className="rounded-full mr-2">{mockSources.length}</Badge>
          fontes de conhecimento configuradas
        </div>
        
        <div className="flex items-center">
          <Input 
            placeholder="Buscar fontes..." 
            className="h-8 w-[200px]"
          />
        </div>
      </div>

      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Nome da Fonte</TableHead>
            <TableHead>Tipo</TableHead>
            <TableHead>Status</TableHead>
            <TableHead>Adicionado em</TableHead>
            <TableHead>Ãšltima SincronizaÃ§Ã£o</TableHead>
            <TableHead>Tamanho</TableHead>
            <TableHead>Tags</TableHead>
            <TableHead className="w-[80px]">AÃ§Ãµes</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {mockSources.map((source) => (
            <TableRow key={source.id}>
              <TableCell className="font-medium">{source.name}</TableCell>
              <TableCell>{source.type}</TableCell>
              <TableCell>{getStatusBadge(source.status)}</TableCell>
              <TableCell>{new Date(source.added).toLocaleDateString()}</TableCell>
              <TableCell>{source.lastSync === "-" ? "-" : new Date(source.lastSync).toLocaleDateString()}</TableCell>
              <TableCell>{source.size}</TableCell>
              <TableCell>
                <div className="flex flex-wrap gap-1">
                  {source.tags.map((tag, i) => (
                    <Badge key={i} variant="outline" className="bg-muted">{tag}</Badge>
                  ))}
                </div>
              </TableCell>
              <TableCell>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="ghost" className="h-8 w-8 p-0">
                      <MoreHorizontal className="h-4 w-4" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end">
                    <DropdownMenuItem className="cursor-pointer flex items-center">
                      <RefreshCw className="mr-2 h-4 w-4" /> Sincronizar
                    </DropdownMenuItem>
                    <DropdownMenuItem className="cursor-pointer flex items-center">
                      <FileText className="mr-2 h-4 w-4" /> Editar Metadados
                    </DropdownMenuItem>
                    <DropdownMenuItem className="cursor-pointer flex items-center text-destructive">
                      <Trash2 className="mr-2 h-4 w-4" /> Remover
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
};