/**
 * Script para testar a integra√ß√£o com Z-API para mensagens interativas
 * 
 * Este script testa o envio de mensagens com bot√µes e listas de op√ß√µes
 * usando as credenciais reais da Z-API.
 */

import axios from 'axios';

// Credenciais da Z-API (obtidas das vari√°veis de ambiente)
const instanceId = process.env.ZAPI_INSTANCE_ID;
const token = process.env.ZAPI_TOKEN;
const clientToken = process.env.CLIENT_TOKEN_ZAPI;

// N√∫mero de telefone para teste (substitua pelo n√∫mero real)
const phoneNumber = '5511999999999'; // Substitua pelo n√∫mero real para teste

// Fun√ß√£o para testar o envio de mensagem com bot√µes
async function testSendButtonMessage() {
  console.log('\n===== Testando envio de mensagem com bot√µes =====');
  
  try {
    const url = `https://api.z-api.io/instances/${instanceId}/token/${token}/send-button-list`;
    
    const data = {
      phone: phoneNumber,
      message: 'Esta √© uma mensagem de teste com bot√µes',
      buttonList: {
        buttons: [
          { id: 'btn1', label: 'Op√ß√£o 1' },
          { id: 'btn2', label: 'Op√ß√£o 2' },
          { id: 'btn3', label: 'Op√ß√£o 3' }
        ]
      }
    };
    
    console.log('Enviando requisi√ß√£o para:', url);
    console.log('Dados:', JSON.stringify(data, null, 2));
    
    const response = await axios.post(url, data, {
      headers: {
        'Content-Type': 'application/json',
        'Client-Token': clientToken
      }
    });
    
    console.log('Resposta:', JSON.stringify(response.data, null, 2));
    console.log('‚úÖ Mensagem com bot√µes enviada com sucesso!');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao enviar mensagem com bot√µes:');
    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Dados:', JSON.stringify(error.response.data, null, 2));
    } else {
      console.error(error.message);
    }
    return false;
  }
}

// Fun√ß√£o para testar o envio de lista de op√ß√µes
async function testSendOptionList() {
  console.log('\n===== Testando envio de lista de op√ß√µes =====');
  
  try {
    const url = `https://api.z-api.io/instances/${instanceId}/token/${token}/send-option-list`;
    
    const data = {
      phone: phoneNumber,
      title: 'Lista de op√ß√µes de teste',
      buttonText: 'Ver op√ß√µes',
      description: 'Selecione uma das op√ß√µes abaixo',
      sections: [
        {
          title: 'Produtos',
          rows: [
            { id: 'prod1', title: 'Produto 1', description: 'Descri√ß√£o do produto 1' },
            { id: 'prod2', title: 'Produto 2', description: 'Descri√ß√£o do produto 2' }
          ]
        },
        {
          title: 'Servi√ßos',
          rows: [
            { id: 'serv1', title: 'Servi√ßo 1', description: 'Descri√ß√£o do servi√ßo 1' },
            { id: 'serv2', title: 'Servi√ßo 2', description: 'Descri√ß√£o do servi√ßo 2' }
          ]
        }
      ]
    };
    
    console.log('Enviando requisi√ß√£o para:', url);
    console.log('Dados:', JSON.stringify(data, null, 2));
    
    const response = await axios.post(url, data, {
      headers: {
        'Content-Type': 'application/json',
        'Client-Token': clientToken
      }
    });
    
    console.log('Resposta:', JSON.stringify(response.data, null, 2));
    console.log('‚úÖ Lista de op√ß√µes enviada com sucesso!');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao enviar lista de op√ß√µes:');
    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Dados:', JSON.stringify(error.response.data, null, 2));
    } else {
      console.error(error.message);
    }
    return false;
  }
}

// Fun√ß√£o principal para executar todos os testes
async function runTests() {
  console.log('üîç Iniciando testes de integra√ß√£o com Z-API para mensagens interativas');
  console.log(`Instance ID: ${instanceId ? '‚úì configurado' : '‚úó n√£o configurado'}`);
  console.log(`Token: ${token ? '‚úì configurado' : '‚úó n√£o configurado'}`);
  console.log(`Client Token: ${clientToken ? '‚úì configurado' : '‚úó n√£o configurado'}`);
  
  if (!instanceId || !token || !clientToken) {
    console.error('‚ùå Credenciais incompletas. Configure as vari√°veis de ambiente ZAPI_INSTANCE_ID, ZAPI_TOKEN e CLIENT_TOKEN_ZAPI.');
    process.exit(1);
  }
  
  // Executar testes
  const results = {
    buttonMessage: await testSendButtonMessage(),
    optionList: await testSendOptionList()
  };
  
  // Resumo dos resultados
  console.log('\n===== Resumo dos testes =====');
  console.log(`Mensagem com bot√µes: ${results.buttonMessage ? '‚úÖ Sucesso' : '‚ùå Falha'}`);
  console.log(`Lista de op√ß√µes: ${results.optionList ? '‚úÖ Sucesso' : '‚ùå Falha'}`);
  
  // Verificar se todos os testes passaram
  const allPassed = Object.values(results).every(result => result === true);
  if (allPassed) {
    console.log('\n‚úÖ Todos os testes passaram com sucesso!');
  } else {
    console.log('\n‚ùå Alguns testes falharam. Verifique os logs acima para mais detalhes.');
    process.exit(1);
  }
}

// Executar os testes
runTests().catch(error => {
  console.error('Erro n√£o tratado:', error);
  process.exit(1);
});
